!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
%	.\matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	.\matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	.\matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
<C-G>S	.\surround.vim	/^    imap        <C-G>S <Plug>ISurround$/;"	m
<C-G>s	.\surround.vim	/^    imap        <C-G>s <Plug>Isurround$/;"	m
<C-S>	.\surround.vim	/^        imap     <C-S> <Plug>Isurround$/;"	m
<Leader>Htd	.\AlignMaps.vim	/^map <silent> <Leader>Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Leader>Htd	:<BS><BS><BS><CR>ma'><Leader>Htd	.\AlignMaps.vim	/^vmap <silent> <Leader>Htd	:<BS><BS><BS><CR>ma'><Leader>Htd$/;"	m
<Leader>T|	.\AlignMaps.vim	/^map <silent> <Leader>T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T|	:<BS><BS><BS><CR>ma'><Leader>T|	.\AlignMaps.vim	/^vmap <silent> <Leader>T|	:<BS><BS><BS><CR>ma'><Leader>T|$/;"	m
<Leader>T#	.\AlignMaps.vim	/^map <silent> <Leader>T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T,	.\AlignMaps.vim	/^map <silent> <Leader>T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T,	:<BS><BS><BS><CR>ma'><Leader>T,	.\AlignMaps.vim	/^vmap <silent> <Leader>T,	:<BS><BS><BS><CR>ma'><Leader>T,$/;"	m
<Leader>T:	.\AlignMaps.vim	/^map <silent> <Leader>T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T:	:<BS><BS><BS><CR>ma'><Leader>T:	.\AlignMaps.vim	/^vmap <silent> <Leader>T:	:<BS><BS><BS><CR>ma'><Leader>T:$/;"	m
<Leader>T;	.\AlignMaps.vim	/^map <silent> <Leader>T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T<	.\AlignMaps.vim	/^map <silent> <Leader>T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T<	:<BS><BS><BS><CR>ma'><Leader>T<	.\AlignMaps.vim	/^vmap <silent> <Leader>T<	:<BS><BS><BS><CR>ma'><Leader>T<$/;"	m
<Leader>T=	.\AlignMaps.vim	/^map <silent> <Leader>T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0xff>\\<Char-0xff>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0xff>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE<Leader>acom$/;"	m
<Leader>T=	:<BS><BS><BS><CR>ma'><Leader>T=	.\AlignMaps.vim	/^vmap <silent> <Leader>T=	:<BS><BS><BS><CR>ma'><Leader>T=$/;"	m
<Leader>T?	.\AlignMaps.vim	/^map <silent> <Leader>T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Leader>T@	.\AlignMaps.vim	/^map <silent> <Leader>T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>T@	:<BS><BS><BS><CR>ma'><Leader>T@	.\AlignMaps.vim	/^vmap <silent> <Leader>T@	:<BS><BS><BS><CR>ma'><Leader>T@$/;"	m
<Leader>Tab	.\AlignMaps.vim	/^map <silent> <Leader>Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Leader>Ts,	.\AlignMaps.vim	/^map <silent> <Leader>Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Leader>Ts,	:<BS><BS><BS><CR>ma'><Leader>Ts,	.\AlignMaps.vim	/^vmap <silent> <Leader>Ts,	:<BS><BS><BS><CR>ma'><Leader>Ts,$/;"	m
<Leader>Tsp	.\AlignMaps.vim	/^map <silent> <Leader>Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Leader>Tsp	:<BS><BS><BS><CR>ma'><Leader>Tsp	.\AlignMaps.vim	/^vmap <silent> <Leader>Tsp	:<BS><BS><BS><CR>ma'><Leader>Tsp$/;"	m
<Leader>T~	.\AlignMaps.vim	/^map <silent> <Leader>T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Leader>a,	.\AlignMaps.vim	/^map <silent> <Leader>a,    <SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk<Leader>jnr,<CR>:silent 'y,'zg\/,\/call <SID>FixMultiDec()<CR>'z<Leader>adec<SID>WE$/;"	m
<Leader>a,	:<BS><BS><BS><CR>ma'><Leader>a,	.\AlignMaps.vim	/^vmap <silent> <Leader>a,	:<BS><BS><BS><CR>ma'><Leader>a,$/;"	m
<Leader>a<	.\AlignMaps.vim	/^map <silent> <Leader>a<    <SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>a<	:<BS><BS><BS><CR>ma'><Leader>a<	.\AlignMaps.vim	/^vmap <silent> <Leader>a<	:<BS><BS><BS><CR>ma'><Leader>a<$/;"	m
<Leader>a=	.\AlignMaps.vim	/^map <silent> <Leader>a=    <SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Leader>a=	:<BS><BS><BS><CR>ma'><Leader>a=	.\AlignMaps.vim	/^vmap <silent> <Leader>a=	:<BS><BS><BS><CR>ma'><Leader>a=$/;"	m
<Leader>a?	.\AlignMaps.vim	/^map <silent> <Leader>a?    <SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Leader>a?	:<BS><BS><BS><CR>ma'><Leader>a?	.\AlignMaps.vim	/^vmap <silent> <Leader>a?	:<BS><BS><BS><CR>ma'><Leader>a?$/;"	m
<Leader>abox	.\AlignMaps.vim	/^map <silent> <Leader>abox  <SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Leader>abox	:<BS><BS><BS><CR>ma'><Leader>abox	.\AlignMaps.vim	/^vmap <silent> <Leader>abox	:<BS><BS><BS><CR>ma'><Leader>abox$/;"	m
<Leader>acom	.\AlignMaps.vim	/^map <silent> <Leader>acom  <SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk<Leader>tW@:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Leader>acom	:<BS><BS><BS><CR>ma'><Leader>acom	.\AlignMaps.vim	/^vmap <silent> <Leader>acom	:<BS><BS><BS><CR>ma'><Leader>acom$/;"	m
<Leader>adcom	.\AlignMaps.vim	/^map <silent> <Leader>adcom <SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk<Leader>tdW@:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Leader>adec	.\AlignMaps.vim	/^map <silent> <Leader>adec  <SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR><Leader>t@:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Leader>adec	:<BS><BS><BS><CR>ma'><Leader>adec	.\AlignMaps.vim	/^vmap <silent> <Leader>adec	:<BS><BS><BS><CR>ma'><Leader>adec$/;"	m
<Leader>adef	.\AlignMaps.vim	/^map <silent> <Leader>adef  <SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk<Leader>t@'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Leader>adef	:<BS><BS><BS><CR>ma'><Leader>adef	.\AlignMaps.vim	/^vmap <silent> <Leader>adef	:<BS><BS><BS><CR>ma'><Leader>adef$/;"	m
<Leader>aenum	.\AlignMaps.vim	/^map <silent> <Leader>aenum  <SID>WS:'a,'zs\/\\([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl mp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Leader>afnc	.\AlignMaps.vim	/^map <silent> <Leader>afnc  :set lz<CR>:silent call <SID>Afnc()<CR>:set nolz<CR>$/;"	m
<Leader>afnc	:<BS><BS><BS><CR>ma'><Leader>afnc	.\AlignMaps.vim	/^vmap <silent> <Leader>afnc	:<BS><BS><BS><CR>ma'><Leader>afnc$/;"	m
<Leader>anum	.\AlignMaps.vim	/^ map <silent> <Leader>anum  <SID>WS:'a,'zs\/\\([0-9.]\\)\\s\\+\\([-+]\\=[.,]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl mp0P0<CR>:'a,'zAlign [.,@]<CR>:'a,'zs\/\\([-0-9.,]*\\)\\(\\s*\\)\\([.,]\\)\/\\2\\1\\3\/g<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Leader>anum	.\AlignMaps.vim	/^ map <silent> <Leader>anum  <SID>WS:'a,'zs\/\\([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl mp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Leader>anum	.\AlignMaps.vim	/^ map <silent> <Leader>anum  <SID>WS:'a,'zs\/\\([0-9.]\\)\\s\\+\\zs\\([-+]\\=\\d\\)\/@\\1\/ge<CR>$/;"	m
<Leader>anum	:<BS><BS><BS><CR>ma'><Leader>anum	.\AlignMaps.vim	/^vmap <silent> <Leader>anum	:<BS><BS><BS><CR>ma'><Leader>anum$/;"	m
<Leader>aocom	.\AlignMaps.vim	/^map <silent> <Leader>aocom :AlignPush<CR>:AlignCtrl g \/[*\/]<CR><Leader>acom:AlignPop<CR>$/;"	m
<Leader>aocom	:<BS><BS><BS><CR>ma'><Leader>aocom	.\AlignMaps.vim	/^vmap <silent> <Leader>aocom	:<BS><BS><BS><CR>ma'><Leader>aocom$/;"	m
<Leader>ascom	.\AlignMaps.vim	/^map <silent> <Leader>ascom <SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk<Leader>tW@:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Leader>ascom	:<BS><BS><BS><CR>ma'><Leader>ascom	.\AlignMaps.vim	/^vmap <silent> <Leader>ascom	:<BS><BS><BS><CR>ma'><Leader>ascom$/;"	m
<Leader>aunum	.\AlignMaps.vim	/^map <silent> <Leader>aunum  <SID>WS:'a,'zs\/\\([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl mp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Leader>be	.\bufexplorer.vim	/^nmap <silent> <unique> <Leader>be :BufExplorer<CR>$/;"	m
<Leader>bs	.\bufexplorer.vim	/^nmap <silent> <unique> <Leader>bs :HSBufExplorer<CR>$/;"	m
<Leader>bv	.\bufexplorer.vim	/^nmap <silent> <unique> <Leader>bv :VSBufExplorer<CR>$/;"	m
<Leader>ih	.\a.vim	/^imap <Leader>ih <ESC>:IHS<CR>$/;"	m
<Leader>ih	.\a.vim	/^nmap <Leader>ih :IHS<CR>$/;"	m
<Leader>ihn	.\a.vim	/^imap <Leader>ihn <ESC>:IHN<CR>$/;"	m
<Leader>ihn	.\a.vim	/^nmap <Leader>ihn :IHN<CR>$/;"	m
<Leader>is	.\a.vim	/^imap <Leader>is <ESC>:IHS<CR>:A<CR>$/;"	m
<Leader>is	.\a.vim	/^nmap <Leader>is :IHS<CR>:A<CR>$/;"	m
<Leader>jnr,	.\AlignMaps.vim	/^map <silent> <Leader>jnr,  :call <SID>CharJoiner(",")<CR>$/;"	m
<Leader>jnr=	.\AlignMaps.vim	/^map <silent> <Leader>jnr=  :call <SID>CharJoiner("=")<CR>$/;"	m
<Leader>lcs	.\c.vim	/^	nmap  <unique>  <silent>  <Leader>lcs   :call C_CreateGuiMenus()<CR>$/;"	m
<Leader>m=	.\AlignMaps.vim	/^map <silent> <Leader>m=   <SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0xff>\\<Char-0xff>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0xff>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk<Leader>t@:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Leader>rwp	.\cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	.\cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<Leader>t|	.\AlignMaps.vim	/^map <silent> <Leader>t| <SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>t|	:<BS><BS><BS><CR>ma'><Leader>t|	.\AlignMaps.vim	/^vmap <silent> <Leader>t|	:<BS><BS><BS><CR>ma'><Leader>t|$/;"	m
<Leader>t#	.\AlignMaps.vim	/^map <silent> <Leader>t#   <SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>t,	.\AlignMaps.vim	/^map <silent> <Leader>t,   <SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>t,	:<BS><BS><BS><CR>ma'><Leader>t,	.\AlignMaps.vim	/^vmap <silent> <Leader>t,	:<BS><BS><BS><CR>ma'><Leader>t,$/;"	m
<Leader>t:	.\AlignMaps.vim	/^map <silent> <Leader>t:   <SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>t:	:<BS><BS><BS><CR>ma'><Leader>t:	.\AlignMaps.vim	/^vmap <silent> <Leader>t:	:<BS><BS><BS><CR>ma'><Leader>t:$/;"	m
<Leader>t;	.\AlignMaps.vim	/^map <silent> <Leader>t;   <SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Leader>t;	:<BS><BS><BS><CR>ma'><Leader>t;	.\AlignMaps.vim	/^vmap <silent> <Leader>t;	:<BS><BS><BS><CR>ma'><Leader>t;$/;"	m
<Leader>t<	.\AlignMaps.vim	/^map <silent> <Leader>t<   <SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>t<	:<BS><BS><BS><CR>ma'><Leader>t<	.\AlignMaps.vim	/^vmap <silent> <Leader>t<	:<BS><BS><BS><CR>ma'><Leader>t<$/;"	m
<Leader>t=	.\AlignMaps.vim	/^map <silent> <Leader>t=   <SID>WS:call <SID>Equals()<CR><SID>WE$/;"	m
<Leader>t=	:<BS><BS><BS><CR>ma'><Leader>t=	.\AlignMaps.vim	/^vmap <silent> <Leader>t=	:<BS><BS><BS><CR>ma'><Leader>t=$/;"	m
<Leader>t?	.\AlignMaps.vim	/^map <silent> <Leader>t?   <SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Leader>t?	:<BS><BS><BS><CR>ma'><Leader>t?	.\AlignMaps.vim	/^vmap <silent> <Leader>t?	:<BS><BS><BS><CR>ma'><Leader>t?$/;"	m
<Leader>t@	.\AlignMaps.vim	/^map <silent> <Leader>t@   :AlignCtrl mIp1P1=l @<CR>:'a,.Align<CR>$/;"	m
<Leader>t@	:<BS><BS><BS><CR>ma'><Leader>t@	.\AlignMaps.vim	/^vmap <silent> <Leader>t@	:<BS><BS><BS><CR>ma'><Leader>t@$/;"	m
<Leader>tW@	.\AlignMaps.vim	/^map <silent> <Leader>tW@  :AlignCtrl mWp1P1=l @<CR>:'a,.Align<CR>$/;"	m
<Leader>tab	.\AlignMaps.vim	/^map <silent> <Leader>tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0xff>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0xff>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0xff>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0xff>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Leader>tab	:<BS><BS><BS><CR>ma'><Leader>tab	.\AlignMaps.vim	/^vmap <silent> <Leader>tab	:<BS><BS><BS><CR>ma'><Leader>tab$/;"	m
<Leader>tdW@	.\AlignMaps.vim	/^map <silent> <Leader>tdW@ :AlignCtrl v ^\\s*\/[\/*]<CR>:AlignCtrl mWp1P1=l @<CR>:'a,.Align<CR>$/;"	m
<Leader>tml	.\AlignMaps.vim	/^map <silent> <Leader>tml  <SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>tml	:<BS><BS><BS><CR>ma'><Leader>tml	.\AlignMaps.vim	/^vmap <silent> <Leader>tml	:<BS><BS><BS><CR>ma'><Leader>tml$/;"	m
<Leader>tp@	:<BS><BS><BS><CR>ma'><Leader>tp@	.\AlignMaps.vim	/^vmap <silent> <Leader>tp@	:<BS><BS><BS><CR>ma'><Leader>tp@$/;"	m
<Leader>ts,	.\AlignMaps.vim	/^map <silent> <Leader>ts,  <SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Leader>ts,	:<BS><BS><BS><CR>ma'><Leader>ts,	.\AlignMaps.vim	/^vmap <silent> <Leader>ts,	:<BS><BS><BS><CR>ma'><Leader>ts,$/;"	m
<Leader>tsp	.\AlignMaps.vim	/^map <silent> <Leader>tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Leader>tsp	:<BS><BS><BS><CR>ma'><Leader>tsp	.\AlignMaps.vim	/^vmap <silent> <Leader>tsp	:<BS><BS><BS><CR>ma'><Leader>tsp$/;"	m
<Leader>tsq	.\AlignMaps.vim	/^map <silent> <Leader>tsq  <SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Leader>tsq	:<BS><BS><BS><CR>ma'><Leader>tsq	.\AlignMaps.vim	/^vmap <silent> <Leader>tsq	:<BS><BS><BS><CR>ma'><Leader>tsq$/;"	m
<Leader>tt	.\AlignMaps.vim	/^map <silent> <Leader>tt   <SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Leader>tt	:<BS><BS><BS><CR>ma'><Leader>tt	.\AlignMaps.vim	/^vmap <silent> <Leader>tt	:<BS><BS><BS><CR>ma'><Leader>tt$/;"	m
<Leader>t~	.\AlignMaps.vim	/^map <silent> <Leader>t~   <SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Leader>ucs	.\c.vim	/^	nmap  <unique>  <silent>  <Leader>ucs   :call C_RemoveGuiMenus()<CR>$/;"	m
<Leader>v	.\compview.vim	/^    map <unique> <Leader>v <Plug>CompView$/;"	m
<Leader>v2	.\visual_studio.vim	/^    nmap <silent> <Leader>v2 :call DTEFindResults(2)<cr>$/;"	m
<Leader>va	.\visual_studio.vim	/^    nmap <silent> <Leader>va :call DTEAbout()<cr>$/;"	m
<Leader>vb	.\visual_studio.vim	/^    nmap <silent> <Leader>vb :call DTEBuildSolution()<cr>$/;"	m
<Leader>vc	.\visual_studio.vim	/^    nmap <silent> <Leader>vc :call DTECompileFile()<cr>$/;"	m
<Leader>vf	.\visual_studio.vim	/^    nmap <silent> <Leader>vf :call DTEFindResults(1)<cr>$/;"	m
<Leader>vg	.\visual_studio.vim	/^    nmap <silent> <Leader>vg :call DTEGetFile()<cr>$/;"	m
<Leader>vh	.\visual_studio.vim	/^    nmap <silent> <Leader>vh :call DTEOnline()<cr>$/;"	m
<Leader>vj	.\visual_studio.vim	/^    nmap <silent> <Leader>vj :call DTEGetProjects()<cr>$/;"	m
<Leader>vo	.\visual_studio.vim	/^    nmap <silent> <Leader>vo :call DTEOutput()<cr>$/;"	m
<Leader>vp	.\visual_studio.vim	/^    nmap <silent> <Leader>vp :call DTEPutFile()<cr>$/;"	m
<Leader>vs	.\visual_studio.vim	/^    nmap <silent> <Leader>vs :call DTEGetSolutions()<cr>$/;"	m
<Leader>vt	.\visual_studio.vim	/^    nmap <silent> <Leader>vt :call DTETaskList()<cr>$/;"	m
<Leader>vu	.\visual_studio.vim	/^    nmap <silent> <Leader>vu :call DTEBuildStartupProject()<cr>$/;"	m
<Leader>w=	.\AlignMaps.vim	/^map <silent> <Leader>w=   <SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0xff>\\<Char-0xff>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0xff>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk<Leader>t@:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	.\AlignMaps.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignWrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	.\AlignMaps.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignWrapperStart()<CR>$/;"	m
<Plug>Comment	.\EnhancedCommentify.vim	/^noremap <Plug>Comment$/;"	m
<Plug>CompView	.\compview.vim	/^nnoremap <unique> <script> <Plug>CompView :CompView<CR>$/;"	m
<Plug>Csurround	.\surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DeComment	.\EnhancedCommentify.vim	/^noremap <Plug>DeComment$/;"	m
<Plug>Dsurround	.\surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>FirstLine	.\EnhancedCommentify.vim	/^noremap <Plug>FirstLine$/;"	m
<Plug>ISurround	.\surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	.\surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	.\cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	.\cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>Traditional	.\EnhancedCommentify.vim	/^noremap <Plug>Traditional$/;"	m
<Plug>VCSAdd	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd<CR>$/;"	m
<Plug>VCSAnnotate	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate<CR>$/;"	m
<Plug>VCSClearAndGotoOriginal	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!<CR>$/;"	m
<Plug>VCSCommit	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit<CR>$/;"	m
<Plug>VCSDelete	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete<CR>$/;"	m
<Plug>VCSDiff	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff<CR>$/;"	m
<Plug>VCSGotoOriginal	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal<CR>$/;"	m
<Plug>VCSInfo	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo<CR>$/;"	m
<Plug>VCSLock	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock<CR>$/;"	m
<Plug>VCSLog	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog<CR>$/;"	m
<Plug>VCSRevert	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert<CR>$/;"	m
<Plug>VCSReview	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview<CR>$/;"	m
<Plug>VCSStatus	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus<CR>$/;"	m
<Plug>VCSUnlock	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock<CR>$/;"	m
<Plug>VCSUpdate	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate<CR>$/;"	m
<Plug>VCSVimDiff	.\vcscommand.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff<CR>$/;"	m
<Plug>VSurround	.\surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/;"	m
<Plug>VisualComment	.\EnhancedCommentify.vim	/^noremap <Plug>VisualComment$/;"	m
<Plug>VisualDeComment	.\EnhancedCommentify.vim	/^noremap <Plug>VisualDeComment$/;"	m
<Plug>VisualFirstLine	.\EnhancedCommentify.vim	/^noremap <Plug>VisualFirstLine$/;"	m
<Plug>VisualTraditional	.\EnhancedCommentify.vim	/^noremap <Plug>VisualTraditional$/;"	m
<Plug>Vsurround	.\surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	.\surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	.\surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	.\surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	.\surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	.\AlignMaps.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	.\AlignMaps.vim	/^ nmap <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>YRGetChar	.\yankring.vim	/^inoremap <script> <SID>YRGetChar <c-r>=YRGetChar()<CR>$/;"	m
<SID>YRGetSearch	.\yankring.vim	/^inoremap <script> <SID>YRGetSearch <c-r>=YRGetSearch()<CR>$/;"	m
<SID>xx	.\taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<SID>yrrecord	.\yankring.vim	/^inoremap <silent> <SID>yrrecord <C-R>=YRRecord3()<cr>$/;"	m
<SID>yrrecord	.\yankring.vim	/^nnoremap <silent> <SID>yrrecord :call YRRecord3()<cr>$/;"	m
A	.\a.vim	/^comm! -nargs=? -bang A call AlternateFile("n<bang>", <f-args>)$/;"	c
AN	.\a.vim	/^comm! -nargs=? -bang AN call NextAlternate("<bang>")$/;"	c
AS	.\a.vim	/^comm! -nargs=? -bang AS call AlternateFile("h<bang>", <f-args>)$/;"	c
AT	.\a.vim	/^comm! -nargs=? -bang AT call AlternateFile("t<bang>", <f-args>)$/;"	c
AV	.\a.vim	/^comm! -nargs=? -bang AV call AlternateFile("v<bang>", <f-args>)$/;"	c
ActivateBuffer	.\bufexplorer.vim	/^function s:ActivateBuffer()$/;"	f
AddAlternateExtensionMapping	.\a.vim	/^function! <SID>AddAlternateExtensionMapping(extension, alternates)$/;"	f
AddLineIfAtBoundary	.\sketch.vim	/^fun! AddLineIfAtBoundary()$/;"	f
Afnc	.\AlignMaps.vim	/^fun! s:Afnc()$/;"	f
Align	.\AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
AlignCtrl	.\AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignPop	.\AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	.\AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	.\AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
AlignWrapperEnd	.\AlignMaps.vim	/^fun! AlignWrapperEnd()$/;"	f
AlignWrapperStart	.\AlignMaps.vim	/^fun! AlignWrapperStart()$/;"	f
AlternateFile	.\a.vim	/^function! AlternateFile(splitWindow, ...)$/;"	f
AlternateOpenFileUnderCursor	.\a.vim	/^function! AlternateOpenFileUnderCursor(splitWindow,...)$/;"	f
AlternateOpenNextFile	.\a.vim	/^function! AlternateOpenNextFile(bang)$/;"	f
Bookmark.AddBookmark	.\NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	.\NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	.\NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	.\NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	.\NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	.\NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	.\NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	.\NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.InvalidBookmarks	.\NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	.\NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	.\NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	.\NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	.\NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.compareTo	.\NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	.\NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	.\NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	.\NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.setPath	.\NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	.\NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	.\NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	.\NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufExplorer	.\bufexplorer.vim	/^command BufExplorer :call StartBufExplorer(has ("gui") ? "drop" : "hide edit")$/;"	c
BufExplorer_IsValid	.\bufexplorer.vim	/^function BufExplorer_IsValid()$/;"	f
BufExplorer_ReSize	.\bufexplorer.vim	/^function BufExplorer_ReSize()$/;"	f
BufExplorer_Refresh	.\bufexplorer.vim	/^function BufExplorer_Refresh()$/;"	f
BufExplorer_Start	.\bufexplorer.vim	/^function BufExplorer_Start()$/;"	f
BufferOrFileExists	.\a.vim	/^function! <SID>BufferOrFileExists(fileName)$/;"	f
BuildBufferList	.\bufexplorer.vim	/^function s:BuildBufferList()$/;"	f
CSearch	.\compview.vim	/^function! s:CSearch()$/;"	f
CVSEdit	.\vcscvs.vim	/^com! CVSEdit call s:CVSEdit()$/;"	c
CVSEdit	.\vcscvs.vim	/^function! s:CVSEdit()$/;"	f
CVSEditors	.\vcscvs.vim	/^com! CVSEditors call s:CVSEditors()$/;"	c
CVSEditors	.\vcscvs.vim	/^function! s:CVSEditors()$/;"	f
CVSUnedit	.\vcscvs.vim	/^com! CVSUnedit call s:CVSUnedit()$/;"	c
CVSUnedit	.\vcscvs.vim	/^function! s:CVSUnedit()$/;"	f
CVSWatch	.\vcscvs.vim	/^com! -nargs=1 CVSWatch call s:CVSWatch(<f-args>)$/;"	c
CVSWatch	.\vcscvs.vim	/^function! s:CVSWatch(onoff)$/;"	f
CVSWatchAdd	.\vcscvs.vim	/^com! CVSWatchAdd call s:CVSWatch('add')$/;"	c
CVSWatchOff	.\vcscvs.vim	/^com! CVSWatchOff call s:CVSWatch('off')$/;"	c
CVSWatchOn	.\vcscvs.vim	/^com! CVSWatchOn call s:CVSWatch('on')$/;"	c
CVSWatchRemove	.\vcscvs.vim	/^com! CVSWatchRemove call s:CVSWatch('remove')$/;"	c
CVSWatchers	.\vcscvs.vim	/^com! CVSWatchers call s:CVSWatchers()$/;"	c
CVSWatchers	.\vcscvs.vim	/^function! s:CVSWatchers()$/;"	f
C_AdjustLineEndComm	.\c.vim	/^function! C_AdjustLineEndComm ( mode ) range$/;"	f
C_ApplyFlag	.\c.vim	/^function! C_ApplyFlag ( val, flag )$/;"	f
C_Arguments	.\c.vim	/^function! C_Arguments ()$/;"	f
C_CFileSectionList	.\c.vim	/^function!	C_CFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionListInsert	.\c.vim	/^function! C_CFileSectionListInsert ( arg )$/;"	f
C_CIncludeMenus	.\c.vim	/^function! C_CIncludeMenus ( menupath, liblist )$/;"	f
C_CIosFlagMenus	.\c.vim	/^function! C_CIosFlagMenus ( menupath, flaglist )$/;"	f
C_CheckGlobal	.\c.vim	/^function! C_CheckGlobal ( name )$/;"	f
C_CodeCheck	.\c.vim	/^function! C_CodeCheck ()$/;"	f
C_CodeCheckArguments	.\c.vim	/^function! C_CodeCheckArguments ()$/;"	f
C_CodeComment	.\c.vim	/^function! C_CodeComment( mode, style )$/;"	f
C_CodeFor	.\c.vim	/^function! C_CodeFor( direction, mode )$/;"	f
C_CodeSnippet	.\c.vim	/^function! C_CodeSnippet(mode)$/;"	f
C_CommentCToCpp	.\c.vim	/^function! C_CommentCToCpp()$/;"	f
C_CommentCode	.\c.vim	/^function! C_CommentCode(mode)$/;"	f
C_CommentCppToC	.\c.vim	/^function! C_CommentCppToC()$/;"	f
C_Comment_C_SectionAll	.\c.vim	/^function! C_Comment_C_SectionAll ( type )$/;"	f
C_Comment_H_SectionAll	.\c.vim	/^function! C_Comment_H_SectionAll ( type )$/;"	f
C_Compile	.\c.vim	/^function! C_Compile ()$/;"	f
C_CreateGuiMenus	.\c.vim	/^function! C_CreateGuiMenus ()$/;"	f
C_DateAndTime	.\c.vim	/^function! C_DateAndTime ( format )$/;"	f
C_EditTemplates	.\c.vim	/^function! C_EditTemplates ( type )$/;"	f
C_EscapeBlanks	.\c.vim	/^function! C_EscapeBlanks (arg)$/;"	f
C_ExpandSingleMacro	.\c.vim	/^function! C_ExpandSingleMacro ( val, macroname, replacement )$/;"	f
C_ExpandUserMacros	.\c.vim	/^function! C_ExpandUserMacros ( key )$/;"	f
C_ForTypeComplete	.\c.vim	/^function!	C_ForTypeComplete ( ArgLead, CmdLine, CursorPos )$/;"	f
C_GetLineEndCommCol	.\c.vim	/^function! C_GetLineEndCommCol ()$/;"	f
C_HFileSectionList	.\c.vim	/^function!	C_HFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_HFileSectionListInsert	.\c.vim	/^function! C_HFileSectionListInsert ( arg )$/;"	f
C_Hardcopy	.\c.vim	/^function! C_Hardcopy (arg1)$/;"	f
C_Help	.\c.vim	/^function! C_Help( type )$/;"	f
C_HelpCsupport	.\c.vim	/^function! C_HelpCsupport ()$/;"	f
C_HighlightJumpTargets	.\c.vim	/^function! C_HighlightJumpTargets ()$/;"	f
C_HlMessage	.\c.vim	/^function! C_HlMessage ()$/;"	f
C_Indent	.\c.vim	/^function! C_Indent ( mode )$/;"	f
C_InitMenus	.\c.vim	/^function! C_InitMenus ()$/;"	f
C_Input	.\c.vim	/^function! C_Input ( promp, text, ... )$/;"	f
C_InsertDateAndTime	.\c.vim	/^function! C_InsertDateAndTime ( format )$/;"	f
C_InsertMacroValue	.\c.vim	/^function! C_InsertMacroValue ( key )$/;"	f
C_InsertTemplate	.\c.vim	/^function! C_InsertTemplate ( key, ... )$/;"	f
C_InsertTemplateWrapper	.\c.vim	/^function! C_InsertTemplateWrapper ()$/;"	f
C_JumpCtrlJ	.\c.vim	/^function! C_JumpCtrlJ ()$/;"	f
C_KeywordCommentList	.\c.vim	/^function!	C_KeywordCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_KeywordCommentListInsert	.\c.vim	/^function! C_KeywordCommentListInsert ( arg )$/;"	f
C_LegalizeName	.\c.vim	/^function! C_LegalizeName ( name )$/;"	f
C_LineEndComment	.\c.vim	/^function! C_LineEndComment ( )$/;"	f
C_Link	.\c.vim	/^function! C_Link ()$/;"	f
C_Make	.\c.vim	/^function! C_Make()$/;"	f
C_MakeArguments	.\c.vim	/^function! C_MakeArguments ()$/;"	f
C_MultiLineEndComments	.\c.vim	/^function! C_MultiLineEndComments ( )$/;"	f
C_OpenFold	.\c.vim	/^function! C_OpenFold ( mode )$/;"	f
C_PPIf0	.\c.vim	/^function! C_PPIf0 (mode)$/;"	f
C_PPIf0Remove	.\c.vim	/^function! C_PPIf0Remove ()$/;"	f
C_ProtoClear	.\c.vim	/^function! C_ProtoClear ()$/;"	f
C_ProtoInsert	.\c.vim	/^function! C_ProtoInsert ()$/;"	f
C_ProtoPick	.\c.vim	/^function! C_ProtoPick (mode)$/;"	f
C_ProtoShow	.\c.vim	/^function! C_ProtoShow ()$/;"	f
C_ReadTemplates	.\c.vim	/^function! C_ReadTemplates ( templatefile )$/;"	f
C_RemoveCComment	.\c.vim	/^function! C_RemoveCComment( start, end )$/;"	f
C_RemoveGuiMenus	.\c.vim	/^function! C_RemoveGuiMenus ()$/;"	f
C_RereadTemplates	.\c.vim	/^function! C_RereadTemplates ()$/;"	f
C_Run	.\c.vim	/^function! C_Run ()$/;"	f
C_SetSmallCommentStyle	.\c.vim	/^function! C_SetSmallCommentStyle ()$/;"	f
C_Settings	.\c.vim	/^function! C_Settings ()$/;"	f
C_SpecialCommentList	.\c.vim	/^function!	C_SpecialCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_SpecialCommentListInsert	.\c.vim	/^function! C_SpecialCommentListInsert ( arg )$/;"	f
C_SplintArguments	.\c.vim	/^function! C_SplintArguments ()$/;"	f
C_SplintCheck	.\c.vim	/^function! C_SplintCheck ()$/;"	f
C_Toggle_Gvim_Xterm	.\c.vim	/^function! C_Toggle_Gvim_Xterm ()$/;"	f
C_ToolMenu	.\c.vim	/^function! C_ToolMenu ()$/;"	f
C_XtermSize	.\c.vim	/^function! C_XtermSize ()$/;"	f
ChangeVals	.\snippetsEmu.vim	/^function! s:ChangeVals(changed)$/;"	f
CharJoiner	.\AlignMaps.vim	/^fun! <SID>CharJoiner(chr)$/;"	f
CheckForInTag	.\snippetsEmu.vim	/^function! s:CheckForInTag()$/;"	f
CheckForUpdate	.\compview.vim	/^function! s:CheckForUpdate()$/;"	f
CheckPossibleEmbedding	.\EnhancedCommentify.vim	/^function s:CheckPossibleEmbedding(ft)$/;"	f
CheckSyntax	.\EnhancedCommentify.vim	/^function s:CheckSyntax(line, column)$/;"	f
Choose	.\matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChopTags	.\snippetsEmu.vim	/^function! s:ChopTags(text)$/;"	f
CleanUp	.\matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
Cleanup	.\bufexplorer.vim	/^function s:Cleanup()$/;"	f
Close	.\bufexplorer.vim	/^function s:Close()$/;"	f
CloseAllResultBuffers	.\vcscommand.vim	/^function! s:CloseAllResultBuffers()$/;"	f
CommentEmptyLines	.\EnhancedCommentify.vim	/^function s:CommentEmptyLines(ft)$/;"	f
Commentify	.\EnhancedCommentify.vim	/^function s:Commentify(lineString, commentSymbol, ...)$/;"	f
CommentifyMultiPart	.\EnhancedCommentify.vim	/^function s:CommentifyMultiPart(lineString, commentStart,$/;"	f
CommentifySinglePart	.\EnhancedCommentify.vim	/^function s:CommentifySinglePart(lineString, commentSymbol)$/;"	f
CompView	.\compview.vim	/^command! CompView call s:CSearch()$/;"	c
Count	.\matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CreateBundleSnippet	.\snippetsEmu.vim	/^command! -range CreateBundleSnippet <line1>,<line2>call s:CreateBundleSnippet()$/;"	c
CreateBundleSnippet	.\snippetsEmu.vim	/^function! s:CreateBundleSnippet() range$/;"	f
CreateHelp	.\bufexplorer.vim	/^function s:CreateHelp()$/;"	f
CreateMapping	.\vcscommand.vim	/^function! s:CreateMapping(shortcut, expansion, display)$/;"	f
CreateSnippet	.\snippetsEmu.vim	/^command! -range CreateSnippet <line1>,<line2>call s:CreateSnippet()$/;"	c
CreateSnippet	.\snippetsEmu.vim	/^function! s:CreateSnippet() range$/;"	f
Cursor	.\sketch.vim	/^fun! Cursor(line,col)$/;"	f
D	.\snippetsEmu.vim	/^fun! D(text)$/;"	f
DM	.\cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DTEAbout	.\visual_studio.vim	/^function! DTEAbout()$/;"	f
DTEBuildSolution	.\visual_studio.vim	/^function! DTEBuildSolution()$/;"	f
DTEBuildStartupProject	.\visual_studio.vim	/^function! DTEBuildStartupProject()$/;"	f
DTECompileFile	.\visual_studio.vim	/^function! DTECompileFile()$/;"	f
DTEDebugSolution	.\visual_studio.vim	/^function! DTEDebugSolution()$/;"	f
DTEExec	.\visual_studio.vim	/^function! <Sid>DTEExec(fcn_py, ...)$/;"	f
DTEFindResults	.\visual_studio.vim	/^function! DTEFindResults(which)$/;"	f
DTEGetFile	.\visual_studio.vim	/^function! DTEGetFile()$/;"	f
DTEGetProjects	.\visual_studio.vim	/^function! DTEGetProjects(...)$/;"	f
DTEGetSolutions	.\visual_studio.vim	/^function! DTEGetSolutions(...)$/;"	f
DTEOnline	.\visual_studio.vim	/^function! DTEOnline()$/;"	f
DTEOutput	.\visual_studio.vim	/^function! DTEOutput()$/;"	f
DTEProjectGuiMenuCreate	.\visual_studio.vim	/^function! <Sid>DTEProjectGuiMenuCreate()$/;"	f
DTEProjectGuiSubMenuChoice	.\visual_studio.vim	/^function! <Sid>DTEProjectGuiSubMenuChoice(filename)$/;"	f
DTEProjectGuiSubMenuCreate	.\visual_studio.vim	/^function! <Sid>DTEProjectGuiSubMenuCreate(menu, name, value)$/;"	f
DTEProjectMenuBuildChoice	.\visual_studio.vim	/^function! <Sid>DTEProjectMenuBuildChoice(which)$/;"	f
DTEProjectMenuStartupChoice	.\visual_studio.vim	/^function! <Sid>DTEProjectMenuStartupChoice(which)$/;"	f
DTEProjectTextMenu	.\visual_studio.vim	/^function! <Sid>DTEProjectTextMenu()$/;"	f
DTEPutFile	.\visual_studio.vim	/^function! DTEPutFile()$/;"	f
DTEQuickfixOpen	.\visual_studio.vim	/^function! <Sid>DTEQuickfixOpen(which)$/;"	f
DTEReload	.\visual_studio.vim	/^function! DTEReload()$/;"	f
DTESolutionGuiMenuCreate	.\visual_studio.vim	/^function! <Sid>DTESolutionGuiMenuCreate()$/;"	f
DTESolutionMenuChoice	.\visual_studio.vim	/^function! <Sid>DTESolutionMenuChoice(which)$/;"	f
DTESolutionTextMenu	.\visual_studio.vim	/^function! <Sid>DTESolutionTextMenu()$/;"	f
DTETaskList	.\visual_studio.vim	/^function! DTETaskList()$/;"	f
DeactivateBuffer	.\bufexplorer.vim	/^function s:DeactivateBuffer(remove)$/;"	f
Debug	.\sketch.vim	/^fun! Debug()$/;"	f
Debug	.\snippetsEmu.vim	/^function! s:Debug(func, text)$/;"	f
DecideWhatToDo	.\EnhancedCommentify.vim	/^function s:DecideWhatToDo(lineString, commentStart, ...)$/;"	f
DelIabbr	.\snippetsEmu.vim	/^      \\ DelIabbr call <SID>DelSnippet(<q-args>, "g:")$/;"	c
DelSnippet	.\snippetsEmu.vim	/^      \\ DelSnippet call <SID>DelSnippet(<q-args>, "b:")$/;"	c
DelSnippet	.\snippetsEmu.vim	/^function! s:DelSnippet(snippet, scope)$/;"	f
DeleteBuffer	.\bufexplorer.vim	/^function s:DeleteBuffer(buf, mode)$/;"	f
DeleteEmptyTag	.\snippetsEmu.vim	/^function! s:DeleteEmptyTag()$/;"	f
DestroyMark	.\cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detab	.\sketch.vim	/^fun! s:Detab(str, ts, offset)$/;"	f
DetermineExtension	.\a.vim	/^function! DetermineExtension(path)$/;"	f
DidEnhancedCommentify	.\EnhancedCommentify.vim	/^let DidEnhancedCommentify = 1$/;"	v
DisplayBufferList	.\bufexplorer.vim	/^function s:DisplayBufferList()$/;"	f
DoBlockComputations	.\EnhancedCommentify.vim	/^function s:DoBlockComputations(start, end)$/;"	f
DoCommand	.\vcscvs.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	.\vcsgit.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	.\vcssvk.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	.\vcssvn.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoWordComplete	.\word_complete.vim	/^fun! DoWordComplete()$/;"	f
EditFile	.\vcscommand.vim	/^function! s:EditFile(command, originalBuffer, statusText)$/;"	f
EndWordComplete	.\word_complete.vim	/^fun! EndWordComplete()$/;"	f
EnhCommentifyFallback4Embedded	.\EnhancedCommentify.vim	/^function EnhCommentifyFallback4Embedded(test, fallback)$/;"	f
EnhancedCommentify	.\EnhancedCommentify.vim	/^function EnhancedCommentify(overrideEL, action, ...)$/;"	f
EnhancedCommentifyInitBuffer	.\EnhancedCommentify.vim	/^function EnhancedCommentifyInitBuffer()$/;"	f
EnhancedCommentifySet	.\EnhancedCommentify.vim	/^function EnhancedCommentifySet(option, value)$/;"	f
EnumerateFilesByExtension	.\a.vim	/^function! EnumerateFilesByExtension(path, baseName, extension)$/;"	f
EnumerateFilesByExtensionInPath	.\a.vim	/^function! EnumerateFilesByExtensionInPath(baseName, extension, pathList, relPathBase)$/;"	f
EqualFilePaths	.\a.vim	/^function! <SID>EqualFilePaths(path1, path2)$/;"	f
Equals	.\AlignMaps.vim	/^fun! s:Equals()$/;"	f
Error	.\bufexplorer.vim	/^function s:Error(msg)$/;"	f
Escape	.\EnhancedCommentify.vim	/^function s:Escape(lineString, commentStart, commentEnd)$/;"	f
EscapeAll	.\sketch.vim	/^fun! s:EscapeAll(str)$/;"	f
EscapeString	.\EnhancedCommentify.vim	/^function s:EscapeString(string)$/;"	f
ExecuteExtensionMapping	.\vcscommand.vim	/^function! s:ExecuteExtensionMapping(mapping)$/;"	f
ExecuteVCSCommand	.\vcscommand.vim	/^function! s:ExecuteVCSCommand(command, argList)$/;"	f
Exit	.\compview.vim	/^function! s:Exit(key)$/;"	f
ExpandAlternatePath	.\a.vim	/^function! <SID>ExpandAlternatePath(pathSpec, sfPath)$/;"	f
Field	.\sketch.vim	/^fun! s:Field(string, num, delim)$/;"	f
Fill	.\sketch.vim	/^fun! <SID>Fill()$/;"	f
Fill_line	.\sketch.vim	/^fun! s:Fill_line()$/;"	f
FindFileInSearchPath	.\a.vim	/^function! <SID>FindFileInSearchPath(fileName, pathList, relPathBase)$/;"	f
FindFileInSearchPathEx	.\a.vim	/^function! <SID>FindFileInSearchPathEx(fileName, pathList, relPathBase, count)$/;"	f
FindOrCreateBuffer	.\a.vim	/^function! <SID>FindOrCreateBuffer(fileName, doSplit, findSimilar)$/;"	f
FixMultiDec	.\AlignMaps.vim	/^fun! s:FixMultiDec()$/;"	f
GenerateResultBufferName	.\vcscommand.vim	/^function! s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText)$/;"	f
GenerateResultBufferNameWithExtension	.\vcscommand.vim	/^function! s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText)$/;"	f
GetBufferInfo	.\bufexplorer.vim	/^function s:GetBufferInfo()$/;"	f
GetChar	.\sketch.vim	/^fun! GetChar()$/;"	f
GetFileTypeSettings	.\EnhancedCommentify.vim	/^function s:GetFileTypeSettings(ft)$/;"	f
GetHelpStatus	.\bufexplorer.vim	/^function s:GetHelpStatus()$/;"	f
GetLineLen	.\EnhancedCommentify.vim	/^function s:GetLineLen(line, offset)$/;"	f
GetNthItemFromList	.\a.vim	/^function! <SID>GetNthItemFromList(list, n)$/;"	f
GetPid	.\visual_studio.vim	/^function! <Sid>GetPid()$/;"	f
GetRevision	.\vcscvs.vim	/^function! GetRevision()$/;"	f
GetSuperTabSNR	.\snippetsEmu.vim	/^function! s:GetSuperTabSNR()$/;"	f
GetTabNbr	.\bufexplorer.vim	/^function s:GetTabNbr(bufNbr)$/;"	f
GetWinNbr	.\bufexplorer.vim	/^function s:GetWinNbr(tabNbr, bufNbr)$/;"	f
GoWinbufnr	.\cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
HSBufExplorer	.\bufexplorer.vim	/^command HSBufExplorer :call HorizontalSplitBufExplorer()$/;"	c
Hash	.\snippetsEmu.vim	/^function! s:Hash(text)$/;"	f
HorizontalSplitBufExplorer	.\bufexplorer.vim	/^function HorizontalSplitBufExplorer()$/;"	f
I	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? I     call visincr#VisBlockIncr(s:I     , <f-args>)$/;"	c
IA	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IA	  call visincr#VisBlockIncr(s:IA    , <f-args>)$/;"	c
ID	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? ID    call visincr#VisBlockIncr(s:ID    , <f-args>)$/;"	c
IDMY	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* IDMY  call visincr#VisBlockIncr(s:IDMY  , <f-args>)$/;"	c
IH	.\a.vim	/^comm! -nargs=? -bang IH call AlternateOpenFileUnderCursor("n<bang>", <f-args>)$/;"	c
IHN	.\a.vim	/^comm! -nargs=? -bang IHN call AlternateOpenNextFile("<bang>")$/;"	c
IHS	.\a.vim	/^comm! -nargs=? -bang IHS call AlternateOpenFileUnderCursor("h<bang>", <f-args>)$/;"	c
IHT	.\a.vim	/^comm! -nargs=? -bang IHT call AlternateOpenFileUnderCursor("t<bang>", <f-args>)$/;"	c
IHV	.\a.vim	/^comm! -nargs=? -bang IHV call AlternateOpenFileUnderCursor("v<bang>", <f-args>)$/;"	c
II	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* II    call visincr#VisBlockIncr(s:II    , <f-args>)$/;"	c
IIO	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IIO   call visincr#VisBlockIncr(s:IIO   , <f-args>)$/;"	c
IIPOW	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IIPOW call visincr#VisBlockIncr(s:IIPOW , <f-args>)$/;"	c
IIR	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IIR   call visincr#VisBlockIncr(s:IIR   , <f-args>)$/;"	c
IIX	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IIX   call visincr#VisBlockIncr(s:IIX   , <f-args>)$/;"	c
IM	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IM    call visincr#VisBlockIncr(s:IM    , <f-args>)$/;"	c
IMDY	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* IMDY  call visincr#VisBlockIncr(s:IMDY  , <f-args>)$/;"	c
IO	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IO    call visincr#VisBlockIncr(s:IO    , <f-args>)$/;"	c
IPOW	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IPOW  call visincr#VisBlockIncr(s:IPOW  , <f-args>)$/;"	c
IR	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IR    call visincr#VisBlockIncr(s:IR    , <f-args>)$/;"	c
IX	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? IX    call visincr#VisBlockIncr(s:IX    , <f-args>)$/;"	c
IYMD	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* IYMD  call visincr#VisBlockIncr(s:IYMD  , <f-args>)$/;"	c
Iabbr	.\snippetsEmu.vim	/^         \\ Iabbr call <SID>SetCom(<q-args>, "g:")$/;"	c
InitBooleanVariable	.\EnhancedCommentify.vim	/^function s:InitBooleanVariable(confVar, scriptVar, defaultVal)$/;"	f
InitScriptVariables	.\EnhancedCommentify.vim	/^function s:InitScriptVariables(nameSpace)$/;"	f
InitStringVariable	.\EnhancedCommentify.vim	/^function s:InitStringVariable(confVar, scriptVar, defaultVal)$/;"	f
Initialize	.\bufexplorer.vim	/^function s:Initialize()$/;"	f
InsertRefs	.\matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
IsBlankChar	.\sketch.vim	/^fun! IsBlankChar()$/;"	f
IsBoundary	.\sketch.vim	/^fun! s:IsBoundary()$/;"	f
Jumper	.\snippetsEmu.vim	/^function! <SID>Jumper()$/;"	f
Langmap	.\word_complete.vim	/^fun! s:Langmap(char)$/;"	f
LineNumber	.\compview.vim	/^function! s:LineNumber()$/;"	f
ListBufferSnippets	.\snippetsEmu.vim	/^function! s:ListBufferSnippets(ArgLead, CmdLine, CursorPos)$/;"	f
ListGlobalSnippets	.\snippetsEmu.vim	/^function! s:ListGlobalSnippets(ArgLead, CmdLine, CursorPos)$/;"	f
ListSnippets	.\snippetsEmu.vim	/^function! s:ListSnippets(ArgLead, CmdLine, CursorPos, scope)$/;"	f
LookFor	.\EnhancedCommentify.vim	/^function s:LookFor(what, ...)$/;"	f
MRUCmp	.\bufexplorer.vim	/^function s:MRUCmp(line1, line2)$/;"	f
MRUListShow	.\bufexplorer.vim	/^function s:MRUListShow()$/;"	f
MRUPop	.\bufexplorer.vim	/^function s:MRUPop(buf)$/;"	f
MRUPush	.\bufexplorer.vim	/^function s:MRUPush(buf)$/;"	f
MakeChanges	.\snippetsEmu.vim	/^function! s:MakeChanges()$/;"	f
MapKeys	.\bufexplorer.vim	/^function s:MapKeys()$/;"	f
MarkOrigBufferForSetup	.\vcscommand.vim	/^function! s:MarkOrigBufferForSetup(buffer)$/;"	f
MarkVisEnd	.\sketch.vim	/^fun! MarkVisEnd()$/;"	f
MarkVisStart	.\sketch.vim	/^fun! MarkVisStart()$/;"	f
MatchDebug	.\matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
Match_debug	.\matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	.\matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MoreLines	.\sketch.vim	/^fun! MoreLines(where)$/;"	f
Move	.\sketch.vim	/^fun! Move()$/;"	f
MultiMatch	.\matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
NERDTree	.\NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	.\NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeClose	.\NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFromBookmark	.\NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeGetCurrentNode	.\NERD_tree.vim	/^function! NERDTreeGetCurrentNode()$/;"	f
NERDTreeGetCurrentPath	.\NERD_tree.vim	/^function! NERDTreeGetCurrentPath()$/;"	f
NERDTreeHijackNetrw	.\NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	.\NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeToggle	.\NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NextAlternate	.\a.vim	/^function! NextAlternate(bang)$/;"	f
NextBrush	.\sketch.vim	/^fun! NextBrush()$/;"	f
NextCornerStyle	.\sketch.vim	/^fun! NextCornerStyle()$/;"	f
NextHop	.\snippetsEmu.vim	/^function! <SID>NextHop()$/;"	f
NoSketch	.\sketch.vim	/^fun! NoSketch()$/;"	f
OverrideOption	.\vcscommand.vim	/^function! s:OverrideOption(option, ...)$/;"	f
ParseCommentsOp	.\EnhancedCommentify.vim	/^function s:ParseCommentsOp(commentOpen, commentClose)$/;"	f
ParseSkip	.\matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	.\matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
PasteTransparent	.\sketch.vim	/^fun! PasteTransparent() range$/;"	f
Path.AbsolutePathFor	.\NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	.\NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	.\NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	.\NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	.\NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.WinToUnixPath	.\NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path.bookmarkNames	.\NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	.\NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	.\NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	.\NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	.\NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	.\NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	.\NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.equals	.\NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	.\NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	.\NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	.\NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	.\NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	.\NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getPathTrunk	.\NERD_tree.vim	/^function! s:Path.getPathTrunk()$/;"	f
Path.getSortOrderIndex	.\NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	.\NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.readInfoFromDisk	.\NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	.\NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	.\NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	.\NERD_tree.vim	/^function! s:Path.str(esc)$/;"	f
Path.strAbs	.\NERD_tree.vim	/^function! s:Path.strAbs()$/;"	f
Path.strDisplay	.\NERD_tree.vim	/^function! s:Path.strDisplay()$/;"	f
Path.strForCd	.\NERD_tree.vim	/^function! s:Path.strForCd()$/;"	f
Path.strForEditCmd	.\NERD_tree.vim	/^function! s:Path.strForEditCmd()$/;"	f
Path.strForGlob	.\NERD_tree.vim	/^function! s:Path.strForGlob()$/;"	f
Path.strForOS	.\NERD_tree.vim	/^function! s:Path.strForOS(esc)$/;"	f
Path.strTrunk	.\NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PopFillInfo	.\sketch.vim	/^fun! s:PopFillInfo()$/;"	f
PushFillInfo	.\sketch.vim	/^fun! s:PushFillInfo(line, L, R, dir) "dir can be 'u' up or 'd' down$/;"	f
PythonDllCheck	.\visual_studio.vim	/^function! <Sid>PythonDllCheck()$/;"	f
PythonExeCheck	.\visual_studio.vim	/^function! <Sid>PythonExeCheck()$/;"	f
PythonInit	.\visual_studio.vim	/^function! <Sid>PythonInit()$/;"	f
QArgSplitter	.\cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
RI	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? RI     call visincr#VisBlockIncr(s:RI     , <f-args>)$/;"	c
RID	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? RID    call visincr#VisBlockIncr(s:RID    , <f-args>)$/;"	c
RIDMY	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* RIDMY  call visincr#VisBlockIncr(s:RIDMY  , <f-args>)$/;"	c
RII	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* RII    call visincr#VisBlockIncr(s:RII    , <f-args>)$/;"	c
RIIPOW	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* RIIPOW call visincr#VisBlockIncr(s:RIIPOW , <f-args>)$/;"	c
RIM	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? RIM    call visincr#VisBlockIncr(s:RIM    , <f-args>)$/;"	c
RIMDY	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* RIMDY  call visincr#VisBlockIncr(s:RIMDY  , <f-args>)$/;"	c
RIPOW	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=? RIPOW  call visincr#VisBlockIncr(s:RIPOW  , <f-args>)$/;"	c
RIYMD	.\visincrPlugin.vim	/^com! -ra -complete=expression -na=* RIYMD  call visincr#VisBlockIncr(s:RIYMD  , <f-args>)$/;"	c
RM	.\cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RWP	.\cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
ReSortListing	.\bufexplorer.vim	/^function s:ReSortListing()$/;"	f
RebuildBufferList	.\bufexplorer.vim	/^function s:RebuildBufferList(...)$/;"	f
Ref	.\matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
RemoveAndStoreCommands	.\snippetsEmu.vim	/^function! s:RemoveAndStoreCommands(text)$/;"	f
RemoveBuffer	.\bufexplorer.vim	/^function s:RemoveBuffer(mode)$/;"	f
ReportError	.\vcscommand.vim	/^function! s:ReportError(error)$/;"	f
Resolve	.\matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreMark	.\cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreSearch	.\snippetsEmu.vim	/^function! s:RestoreSearch()$/;"	f
RestoreUserMaps	.\cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	.\cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
ReturnKey	.\snippetsEmu.vim	/^function! s:ReturnKey()$/;"	f
RunCommand	.\snippetsEmu.vim	/^function! s:RunCommand(command, z)$/;"	f
S	.\surround.vim	/^            vmap  S    <Plug>VSurround$/;"	m
SID	.\snippetsEmu.vim	/^function! s:SID()$/;"	f
SM	.\cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SWP	.\cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	.\cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SavePos	.\sketch.vim	/^fun! SavePos(offset)$/;"	f
SaveUserMaps	.\cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	.\cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
SearchFile	.\compview.vim	/^function! s:SearchFile(buffnr, word)$/;"	f
SelectBuffer	.\bufexplorer.vim	/^function s:SelectBuffer(...)$/;"	f
Set	.\bufexplorer.vim	/^function s:Set(var, default)$/;"	f
SetCom	.\snippetsEmu.vim	/^function! <SID>SetCom(text, scope)$/;"	f
SetKeybindings	.\EnhancedCommentify.vim	/^function s:SetKeybindings(where)$/;"	f
SetLocalTagVars	.\snippetsEmu.vim	/^function! s:SetLocalTagVars()$/;"	f
SetSearchStrings	.\snippetsEmu.vim	/^function! s:SetSearchStrings()$/;"	f
SetUpTags	.\snippetsEmu.vim	/^function! s:SetUpTags()$/;"	f
Setup	.\bufexplorer.vim	/^function s:Setup()$/;"	f
SetupBuffer	.\vcscommand.vim	/^function! s:SetupBuffer()$/;"	f
SetupSupertab	.\snippetsEmu.vim	/^function! s:SetupSupertab()$/;"	f
SetupSyntax	.\bufexplorer.vim	/^function s:SetupSyntax()$/;"	f
Sketch	.\sketch.vim	/^fun! Sketch()$/;"	f
SketchArrow	.\sketch.vim	/^fun! SketchArrow()$/;"	f
SketchAtSavedPos	.\sketch.vim	/^fun! SketchAtSavedPos(char)$/;"	f
SketchBar	.\sketch.vim	/^fun! SketchBar()$/;"	f
SketchClick	.\sketch.vim	/^fun! SketchClick(char)$/;"	f
SketchDrag	.\sketch.vim	/^fun! SketchDrag()$/;"	f
SketchErase	.\sketch.vim	/^fun! SketchErase(size) range$/;"	f
SketchFillBox	.\sketch.vim	/^fun! SketchFillBox(style) range$/;"	f
SketchFillBrush	.\sketch.vim	/^fun! SketchFillBrush(style) range$/;"	f
SketchPaint	.\sketch.vim	/^fun! SketchPaint()$/;"	f
SketchSavePos	.\sketch.vim	/^fun! SketchSavePos(dir)$/;"	f
SnipMapKeys	.\snippetsEmu.vim	/^function! s:SnipMapKeys()$/;"	f
Snippet	.\snippetsEmu.vim	/^         \\ Snippet call <SID>SetCom(<q-args>, "b:")$/;"	c
SortListing	.\bufexplorer.vim	/^function s:SortListing()$/;"	f
SortReverse	.\bufexplorer.vim	/^function s:SortReverse()$/;"	f
SortSelect	.\bufexplorer.vim	/^function s:SortSelect()$/;"	f
SpacesToTabs	.\EnhancedCommentify.vim	/^function s:SpacesToTabs(str)$/;"	f
StartAppend	.\word_complete.vim	/^fun! s:StartAppend()$/;"	f
StartBufExplorer	.\bufexplorer.vim	/^function StartBufExplorer(open)$/;"	f
StrLen	.\snippetsEmu.vim	/^function! s:StrLen(str)$/;"	f
SubCommandOutput	.\snippetsEmu.vim	/^function! s:SubCommandOutput(text)$/;"	f
SubSpecialVars	.\snippetsEmu.vim	/^function! s:SubSpecialVars(text)$/;"	f
SubstituteWith	.\EnhancedCommentify.vim	/^function s:SubstituteWith(what, ...)$/;"	f
TabsToSpaces	.\EnhancedCommentify.vim	/^function s:TabsToSpaces(str)$/;"	f
TagList_IsValid	.\taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	.\taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	.\taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	.\taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist	.\taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	.\taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	.\taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	.\taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	.\taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	.\taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	.\taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	.\taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	.\taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	.\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	.\taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	.\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	.\taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	.\taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	.\taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	.\taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	.\taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	.\taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	.\taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	.\taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	.\taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	.\taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	.\taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	.\taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	.\taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	.\taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	.\taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	.\taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	.\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	.\taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	.\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	.\taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	.\taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	.\taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	.\taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	.\taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	.\taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	.\taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	.\taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	.\taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	.\taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	.\taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	.\taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	.\taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	.\taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	.\taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	.\taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	.\taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	.\taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	.\taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	.\taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	.\taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	.\taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	.\taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	.\taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	.\taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	.\taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	.\taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	.\taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	.\taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	.\taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	.\taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	.\taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	.\taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	.\taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	.\taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	.\taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	.\taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	.\taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	.\taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	.\taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	.\taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	.\taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	.\taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	.\taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	.\taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	.\taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	.\taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	.\taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	.\taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	.\taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	.\taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	.\taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	.\taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	.\taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	.\taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	.\taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	.\taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	.\taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	.\taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	.\taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	.\taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	.\taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	.\taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	.\taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	.\taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	.\taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	.\taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	.\taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	.\taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	.\taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	.\taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	.\taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	.\taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	.\taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	.\taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	.\taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	.\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	.\taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	.\taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	.\taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	.\taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	.\taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	.\taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	.\taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	.\taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	.\taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	.\taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	.\taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	.\taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	.\taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	.\taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	.\taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	.\taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	.\taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	.\taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	.\taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	.\taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToggleFindActive	.\bufexplorer.vim	/^function s:ToggleFindActive()$/;"	f
ToggleHelp	.\bufexplorer.vim	/^function s:ToggleHelp()$/;"	f
ToggleShowRelativePath	.\bufexplorer.vim	/^function s:ToggleShowRelativePath()$/;"	f
ToggleShowUnlisted	.\bufexplorer.vim	/^function s:ToggleShowUnlisted()$/;"	f
ToggleSketch	.\sketch.vim	/^fun! ToggleSketch()$/;"	f
ToggleSplitOutPathName	.\bufexplorer.vim	/^function s:ToggleSplitOutPathName()$/;"	f
TreeDirNode.AbsoluteTreeRoot	.\NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	.\NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	.\NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	.\NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	.\NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.addChild	.\NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	.\NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	.\NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	.\NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	.\NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	.\NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	.\NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	.\NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	.\NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	.\NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	.\NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	.\NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	.\NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	.\NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openRecursively	.\NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	.\NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	.\NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	.\NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	.\NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	.\NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootLineNum	.\NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	.\NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	.\NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	.\NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.bookmark	.\NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	.\NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	.\NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	.\NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	.\NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.equals	.\NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	.\NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	.\NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	.\NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	.\NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	.\NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	.\NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	.\NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	.\NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openSplit	.\NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	.\NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	.\NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	.\NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	.\NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	.\NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode.strDisplay	.\NERD_tree.vim	/^function! s:TreeFileNode.strDisplay()$/;"	f
UnCommentify	.\EnhancedCommentify.vim	/^function s:UnCommentify(lineString, commentSymbol, ...)$/;"	f
UnEscape	.\EnhancedCommentify.vim	/^function s:UnEscape(lineString, commentStart, commentEnd)$/;"	f
UnHash	.\snippetsEmu.vim	/^function! s:UnHash(text)$/;"	f
Unlet	.\sketch.vim	/^fun! s:Unlet()$/;"	f
UpdateDoc	.\compview.vim	/^function! s:UpdateDoc()$/;"	f
UpdateHelpStatus	.\bufexplorer.vim	/^function s:UpdateHelpStatus()$/;"	f
VCSAdd	.\vcscommand.vim	/^com! -nargs=* VCSAdd call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Add', [<f-args>]))$/;"	c
VCSAnnotate	.\vcscommand.vim	/^com! -nargs=* VCSAnnotate call s:ExecuteVCSCommand('Annotate', [<f-args>])$/;"	c
VCSBlame	.\vcscommand.vim	/^com! -nargs=* VCSBlame call s:ExecuteVCSCommand('Annotate', [<f-args>])$/;"	c
VCSCommand	.\vcscommand.vim	/^augroup VCSCommand$/;"	a
VCSCommandChangeToCurrentFileDir	.\vcscommand.vim	/^function! VCSCommandChangeToCurrentFileDir(fileName)$/;"	f
VCSCommandChdir	.\vcscommand.vim	/^function! VCSCommandChdir(directory)$/;"	f
VCSCommandCommit	.\vcscommand.vim	/^augroup VCSCommandCommit$/;"	a
VCSCommandDisableBufferSetup	.\vcscommand.vim	/^com! VCSCommandDisableBufferSetup call VCSCommandDisableBufferSetup()$/;"	c
VCSCommandDisableBufferSetup	.\vcscommand.vim	/^function! VCSCommandDisableBufferSetup()$/;"	f
VCSCommandDoCommand	.\vcscommand.vim	/^function! VCSCommandDoCommand(cmd, cmdName, statusText, options)$/;"	f
VCSCommandEnableBufferSetup	.\vcscommand.vim	/^com! VCSCommandEnableBufferSetup call VCSCommandEnableBufferSetup()$/;"	c
VCSCommandEnableBufferSetup	.\vcscommand.vim	/^function! VCSCommandEnableBufferSetup()$/;"	f
VCSCommandGetOption	.\vcscommand.vim	/^function! VCSCommandGetOption(name, default)$/;"	f
VCSCommandGetOriginalBuffer	.\vcscommand.vim	/^function! VCSCommandGetOriginalBuffer(vcsBuffer)$/;"	f
VCSCommandGetStatusLine	.\vcscommand.vim	/^function! VCSCommandGetStatusLine()$/;"	f
VCSCommandGetVCSType	.\vcscommand.vim	/^function! VCSCommandGetVCSType(buffer)$/;"	f
VCSCommandRegisterModule	.\vcscommand.vim	/^function! VCSCommandRegisterModule(name, path, commandMap, mappingMap)$/;"	f
VCSCommandVIMShutdown	.\vcscommand.vim	/^augroup VCSCommandVIMShutdown$/;"	a
VCSCommit	.\vcscommand.vim	/^com! -nargs=? -bang VCSCommit call s:VCSCommit(<q-bang>, <q-args>)$/;"	c
VCSCommit	.\vcscommand.vim	/^function! s:VCSCommit(bang, message)$/;"	f
VCSDelete	.\vcscommand.vim	/^com! -nargs=* VCSDelete call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSDiff	.\vcscommand.vim	/^com! -nargs=* VCSDiff call s:ExecuteVCSCommand('Diff', [<f-args>])$/;"	c
VCSFinishCommit	.\vcscommand.vim	/^function! s:VCSFinishCommit(logMessageList, originalBuffer)$/;"	f
VCSFinishCommitWithBuffer	.\vcscommand.vim	/^function! s:VCSFinishCommitWithBuffer()$/;"	f
VCSGotoOriginal	.\vcscommand.vim	/^com! -nargs=0 -bang VCSGotoOriginal call s:VCSGotoOriginal(<q-bang>)$/;"	c
VCSGotoOriginal	.\vcscommand.vim	/^function! s:VCSGotoOriginal(bang)$/;"	f
VCSInfo	.\vcscommand.vim	/^com! -nargs=* VCSInfo call s:ExecuteVCSCommand('Info', [<f-args>])$/;"	c
VCSLock	.\vcscommand.vim	/^com! -nargs=* VCSLock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Lock', [<f-args>]))$/;"	c
VCSLog	.\vcscommand.vim	/^com! -nargs=* VCSLog call s:ExecuteVCSCommand('Log', [<f-args>])$/;"	c
VCSReload	.\vcscommand.vim	/^com! VCSReload let savedPlugins = s:plugins|let s:plugins = {}|aunmenu Plugin.VCS|unlet! g:loaded_VCSCommand|runtime plugin\/vcscommand.vim|for plugin in values(savedPlugins)|execute 'source' plugin[0]|endfor|unlet savedPlugins$/;"	c
VCSRemove	.\vcscommand.vim	/^com! -nargs=* VCSRemove call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSRevert	.\vcscommand.vim	/^com! -nargs=0 VCSRevert call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Revert', []))$/;"	c
VCSReview	.\vcscommand.vim	/^com! -nargs=? VCSReview call s:ExecuteVCSCommand('Review', [<f-args>])$/;"	c
VCSStatus	.\vcscommand.vim	/^com! -nargs=* VCSStatus call s:ExecuteVCSCommand('Status', [<f-args>])$/;"	c
VCSUnlock	.\vcscommand.vim	/^com! -nargs=* VCSUnlock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Unlock', [<f-args>]))$/;"	c
VCSUpdate	.\vcscommand.vim	/^com! -nargs=0 VCSUpdate call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Update', []))$/;"	c
VCSVimDiff	.\vcscommand.vim	/^com! -nargs=* VCSVimDiff call s:VCSVimDiff(<f-args>)$/;"	c
VCSVimDiff	.\vcscommand.vim	/^function! s:VCSVimDiff(...)$/;"	f
VSBufExplorer	.\bufexplorer.vim	/^command VSBufExplorer :call VerticalSplitBufExplorer()$/;"	c
VerticalSplitBufExplorer	.\bufexplorer.vim	/^function VerticalSplitBufExplorer()$/;"	f
VimDiffRestore	.\vcscommand.vim	/^augroup VimDiffRestore$/;"	a
VimDiffRestore	.\vcscommand.vim	/^function! s:VimDiffRestore(vimDiffBuff)$/;"	f
VisSaveDims	.\sketch.vim	/^fun! VisSaveDims() range$/;"	f
VisWithSavedDims	.\sketch.vim	/^fun! VisWithSavedDims()$/;"	f
Warning	.\bufexplorer.vim	/^function s:Warning(msg)$/;"	f
Wholematch	.\matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
WipeoutCommandBuffers	.\vcscommand.vim	/^function! s:WipeoutCommandBuffers(originalBuffer, VCSCommand)$/;"	f
WordComplete	.\word_complete.vim	/^fun! WordComplete()$/;"	f
YRClear	.\yankring.vim	/^command!                           YRClear        call s:YRClear()$/;"	c
YRClear	.\yankring.vim	/^function! s:YRClear()$/;"	f
YRDeleteRange	.\yankring.vim	/^command! -range -bang     -nargs=? YRDeleteRange  <line1>,<line2>call s:YRYankRange(<bang>1, <args>)$/;"	c
YRDisplayElem	.\yankring.vim	/^function! s:YRDisplayElem(disp_nbr, script_var) $/;"	f
YRDoRepeat	.\yankring.vim	/^function! s:YRDoRepeat() $/;"	f
YRErrorMsg	.\yankring.vim	/^function! s:YRErrorMsg(msg)$/;"	f
YRFocusGained	.\yankring.vim	/^function! s:YRFocusGained()$/;"	f
YRGetChar	.\yankring.vim	/^function! s:YRGetChar()$/;"	f
YRGetElem	.\yankring.vim	/^command!                  -nargs=* YRGetElem      call s:YRGetElem(<args>)$/;"	c
YRGetElem	.\yankring.vim	/^function! s:YRGetElem(...) $/;"	f
YRGetMultiple	.\yankring.vim	/^command!        -bang     -nargs=? YRGetMultiple  call s:YRGetMultiple(<bang>0, <args>)$/;"	c
YRGetMultiple	.\yankring.vim	/^function! s:YRGetMultiple(reverse_order, ...) $/;"	f
YRGetNextElem	.\yankring.vim	/^function! s:YRGetNextElem(start, iter) $/;"	f
YRGetSearch	.\yankring.vim	/^function! s:YRGetSearch()$/;"	f
YRGetValElemNbr	.\yankring.vim	/^function! s:YRGetValElemNbr( position, type )$/;"	f
YRHistoryRead	.\yankring.vim	/^function! s:YRHistoryRead()$/;"	f
YRHistorySave	.\yankring.vim	/^function! s:YRHistorySave()$/;"	f
YRHistoryUpgrade	.\yankring.vim	/^function! s:YRHistoryUpgrade(version)$/;"	f
YRInit	.\yankring.vim	/^function! s:YRInit()$/;"	f
YRInsertLeave	.\yankring.vim	/^function! s:YRInsertLeave()$/;"	f
YRMRUAdd	.\yankring.vim	/^function! s:YRMRUAdd( mru_list, element, element_type )$/;"	f
YRMRUDel	.\yankring.vim	/^function! s:YRMRUDel( mru_list, elem_nbr )$/;"	f
YRMRUGet	.\yankring.vim	/^function! s:YRMRUGet( mru_list, position )$/;"	f
YRMRUHas	.\yankring.vim	/^function! s:YRMRUHas( mru_list, find_str )$/;"	f
YRMRUReset	.\yankring.vim	/^function! s:YRMRUReset( mru_list )$/;"	f
YRMRUSize	.\yankring.vim	/^function! s:YRMRUSize( mru_list )$/;"	f
YRMapsCreate	.\yankring.vim	/^command!                  -nargs=0 YRMapsCreate   call s:YRMapsCreate()$/;"	c
YRMapsCreate	.\yankring.vim	/^function! s:YRMapsCreate(...)$/;"	f
YRMapsDelete	.\yankring.vim	/^command!                  -nargs=0 YRMapsDelete   call s:YRMapsDelete()$/;"	c
YRMapsDelete	.\yankring.vim	/^function! s:YRMapsDelete(...)$/;"	f
YRMapsExpression	.\yankring.vim	/^function! YRMapsExpression(sid, motion, ...)$/;"	f
YRPaste	.\yankring.vim	/^command! -count -register -nargs=* YRPaste        call s:YRPaste(0,1,<args>)$/;"	c
YRPaste	.\yankring.vim	/^function! s:YRPaste(replace_last_paste_selection, nextvalue, direction, ...) $/;"	f
YRPop	.\yankring.vim	/^command!                  -nargs=? YRPop          <line1>,<line2>call s:YRPop(<args>)$/;"	c
YRPop	.\yankring.vim	/^function! s:YRPop(...)$/;"	f
YRPush	.\yankring.vim	/^command!        -register -nargs=? YRPush         call s:YRPush(<args>)$/;"	c
YRPush	.\yankring.vim	/^function! s:YRPush(...) $/;"	f
YRRecord	.\yankring.vim	/^function! YRRecord(...) $/;"	f
YRRecord3	.\yankring.vim	/^function! YRRecord3() $/;"	f
YRRegister	.\yankring.vim	/^function! s:YRRegister()$/;"	f
YRReplace	.\yankring.vim	/^command! -count -register -nargs=* YRReplace      call s:YRPaste(1,<args>)$/;"	c
YRReset	.\yankring.vim	/^function! s:YRReset()$/;"	f
YRSearch	.\yankring.vim	/^command!                  -nargs=? YRSearch       call s:YRSearch(<q-args>)$/;"	c
YRSearch	.\yankring.vim	/^function! s:YRSearch(...) $/;"	f
YRSetNumberedReg	.\yankring.vim	/^function! s:YRSetNumberedReg() $/;"	f
YRSetPrevOP	.\yankring.vim	/^function! s:YRSetPrevOP(op_code, count, reg, mode) $/;"	f
YRShow	.\yankring.vim	/^command!                  -nargs=? YRShow         call s:YRShow(<args>)$/;"	c
YRShow	.\yankring.vim	/^function! s:YRShow(...) $/;"	f
YRToggle	.\yankring.vim	/^command!                  -nargs=? YRToggle       call s:YRToggle(<args>)$/;"	c
YRToggle	.\yankring.vim	/^function! s:YRToggle(...)$/;"	f
YRWarningMsg	.\yankring.vim	/^function! s:YRWarningMsg(msg)$/;"	f
YRWinLeave	.\yankring.vim	/^function! s:YRWinLeave()$/;"	f
YRWindowAction	.\yankring.vim	/^function! s:YRWindowAction(op, cmd_mode) range$/;"	f
YRWindowActionN	.\yankring.vim	/^function! s:YRWindowActionN(op, cmd_mode) $/;"	f
YRWindowOpen	.\yankring.vim	/^function! s:YRWindowOpen(results)$/;"	f
YRWindowStatus	.\yankring.vim	/^function! s:YRWindowStatus(show_help)$/;"	f
YRWindowUpdate	.\yankring.vim	/^function! s:YRWindowUpdate()$/;"	f
YRYankCount	.\yankring.vim	/^command! -count -register -nargs=* YRYankCount    call s:YRYankCount(<args>)$/;"	c
YRYankCount	.\yankring.vim	/^function! s:YRYankCount(...) range$/;"	f
YRYankRange	.\yankring.vim	/^command! -range -bang     -nargs=? YRYankRange    <line1>,<line2>call s:YRYankRange(<bang>0, <args>)$/;"	c
YRYankRange	.\yankring.vim	/^function! s:YRYankRange(do_delete_selection, ...) range$/;"	f
YankRing	.\yankring.vim	/^augroup YankRing$/;"	a
[%	.\matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	.\matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	.\matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
]%	.\matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	.\matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	.\matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
_com_property	.\visual_studio.py	/^def _com_property (object, attr, default=None):$/;"	f
_dte_activate	.\visual_studio.py	/^def _dte_activate (vs_pid):$/;"	f
_dte_exception	.\visual_studio.py	/^def _dte_exception (e):$/;"	f
_dte_get_window	.\visual_studio.py	/^def _dte_get_window(dte, caption):$/;"	f
_dte_has_csharp_projects	.\visual_studio.py	/^def _dte_has_csharp_projects (dte):$/;"	f
_dte_output_activate	.\visual_studio.py	/^def _dte_output_activate (vs_pid):$/;"	f
_dte_project_tree	.\visual_studio.py	/^def _dte_project_tree (project):$/;"	f
_dte_set_autoload	.\visual_studio.py	/^def _dte_set_autoload (vs_pid):$/;"	f
_dte_wait_for_build	.\visual_studio.py	/^def _dte_wait_for_build (dte):$/;"	f
_dte_wait_for_debug	.\visual_studio.py	/^def _dte_wait_for_debug (dte):$/;"	f
_fix_filenames	.\visual_studio.py	/^def _fix_filenames (dirname, lst_text):$/;"	f
_get_dte	.\visual_studio.py	/^def _get_dte (vs_pid):$/;"	f
_get_dte_from_rot	.\visual_studio.py	/^def _get_dte_from_rot (pid=None, sln=None):$/;"	f
_get_wsh	.\visual_studio.py	/^def _get_wsh ():$/;"	f
_vim_activate	.\visual_studio.py	/^def _vim_activate ():$/;"	f
_vim_command	.\visual_studio.py	/^def _vim_command (lst_cmd):$/;"	f
_vim_has_python	.\visual_studio.py	/^def _vim_has_python ():$/;"	f
_vim_msg	.\visual_studio.py	/^def _vim_msg (msg):$/;"	f
_vim_status	.\visual_studio.py	/^def _vim_status (msg):$/;"	f
a%	.\matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
activateNode	.\NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
alternateExtensionsDict	.\a.vim	/^let alternateExtensionsDict = {}$/;"	v
ault	.\visual_studio.py	/^        return default$/;"	f	function:_com_property
ault	.\visual_studio.py	/^        return getattr (object, attr, default)$/;"	f	function:_com_property
beep	.\surround.vim	/^function! s:beep()$/;"	f
bindMappings	.\NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	.\NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	.\NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
centerView	.\NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	.\NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	.\NERD_tree.vim	/^function! s:chRoot()$/;"	f
changesurround	.\surround.vim	/^function! s:changesurround() " {{{1$/;"	f
checkForActivate	.\NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	.\NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clearBookmarks	.\NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	.\NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	.\NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	.\NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	.\NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	.\NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	.\NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	.\surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
compareBookmarks	.\NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	.\NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	.\NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
copyNode	.\NERD_tree.vim	/^function! s:copyNode()$/;"	f
createTreeWin	.\NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	.\surround.vim	/^    nmap          cs   <Plug>Csurround$/;"	m
cvsFunctions.Add	.\vcscvs.vim	/^function! s:cvsFunctions.Add(argList)$/;"	f
cvsFunctions.Annotate	.\vcscvs.vim	/^function! s:cvsFunctions.Annotate(argList)$/;"	f
cvsFunctions.Commit	.\vcscvs.vim	/^function! s:cvsFunctions.Commit(argList)$/;"	f
cvsFunctions.Delete	.\vcscvs.vim	/^function! s:cvsFunctions.Delete(argList)$/;"	f
cvsFunctions.Diff	.\vcscvs.vim	/^function! s:cvsFunctions.Diff(argList)$/;"	f
cvsFunctions.GetBufferInfo	.\vcscvs.vim	/^function! s:cvsFunctions.GetBufferInfo()$/;"	f
cvsFunctions.Identify	.\vcscvs.vim	/^function! s:cvsFunctions.Identify(buffer)$/;"	f
cvsFunctions.Log	.\vcscvs.vim	/^function! s:cvsFunctions.Log(argList)$/;"	f
cvsFunctions.Revert	.\vcscvs.vim	/^function! s:cvsFunctions.Revert(argList)$/;"	f
cvsFunctions.Review	.\vcscvs.vim	/^function! s:cvsFunctions.Review(argList)$/;"	f
cvsFunctions.Status	.\vcscvs.vim	/^function! s:cvsFunctions.Status(argList)$/;"	f
cvsFunctions.Update	.\vcscvs.vim	/^function! s:cvsFunctions.Update(argList)$/;"	f
deleteBookmark	.\NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteNode	.\NERD_tree.vim	/^function! s:deleteNode()$/;"	f
displayHelp	.\NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dosurround	.\surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
ds	.\surround.vim	/^    nmap          ds   <Plug>Dsurround$/;"	m
dte_build_project	.\visual_studio.py	/^def dte_build_project(vs_pid, fn_quickfix, write_first, project_name=None):$/;"	f
dte_build_solution	.\visual_studio.py	/^def dte_build_solution(vs_pid, fn_quickfix, write_first):$/;"	f
dte_compile_file	.\visual_studio.py	/^def dte_compile_file (vs_pid, fn_quickfix):$/;"	f
dte_debug_solution	.\visual_studio.py	/^def dte_debug_solution(vs_pid, fn_quickfix, write_first):$/;"	f
dte_get_file	.\visual_studio.py	/^def dte_get_file (vs_pid, modified=None):$/;"	f
dte_list_instances	.\visual_studio.py	/^def dte_list_instances (vs_pid):$/;"	f
dte_list_projects	.\visual_studio.py	/^def dte_list_projects (vs_pid):$/;"	f
dte_output	.\visual_studio.py	/^def dte_output (vs_pid, fn_output, window_caption, notify=None):$/;"	f
dte_put_file	.\visual_studio.py	/^def dte_put_file (vs_pid, filename, modified, line_num, col_num):$/;"	f
dte_set_startup_project	.\visual_studio.py	/^def dte_set_startup_project(vs_pid, project_name, project_index):$/;"	f
dte_task_list	.\visual_studio.py	/^def dte_task_list (vs_pid, fn_quickfix):$/;"	f
dumpHelp	.\NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	.\NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	.\NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	.\NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
exec	.\NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
executeNode	.\NERD_tree.vim	/^function! s:executeNode()$/;"	f
extractafter	.\surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	.\surround.vim	/^function! s:extractbefore(str)$/;"	f
firstUsableWindow	.\NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	.\surround.vim	/^function! s:fixindent(str,spc)$/;"	f
g%	.\matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	.\matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	.\matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:BufExplorer_title	.\bufexplorer.vim	/^let g:BufExplorer_title = "\\[Buf\\ List\\]"$/;"	v
g:C_Dictionary_File	.\c.vim	/^  let g:C_Dictionary_File = s:plugin_dir.'c-support\/wordlists\/c-c++-keywords.list,'.$/;"	v
g:C_Version	.\c.vim	/^let g:C_Version= "5.7"  							" version number of this script; do not change$/;"	v
g:DrChipTopLvlMenu	.\AlignMaps.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:EnhCommentifyTraditionalMode	.\EnhancedCommentify.vim	/^    let g:EnhCommentifyTraditionalMode = 'Yes'$/;"	v
g:NERDTreeIgnore	.\NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	.\NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:VCSCOMMAND_IDENTIFY_EXACT	.\vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_EXACT = 1$/;"	v
g:VCSCOMMAND_IDENTIFY_INEXACT	.\vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_INEXACT = -1$/;"	v
g:alternateNoDefaultAlternate	.\a.vim	/^   let g:alternateNoDefaultAlternate = 0$/;"	v
g:alternateRelativeFiles	.\a.vim	/^   let g:alternateRelativeFiles = 0$/;"	v
g:alternateSearchPath	.\a.vim	/^  let g:alternateSearchPath = 'sfr:..\/source,sfr:..\/src,sfr:..\/include,sfr:..\/inc'$/;"	v
g:bufexplorer_version	.\bufexplorer.vim	/^let g:bufexplorer_version = "7.2.2"$/;"	v
g:cvWindowPosition	.\compview.vim	/^    let g:cvWindowPosition = 0$/;"	v
g:loaded_alignPlugin	.\AlignPlugin.vim	/^let g:loaded_alignPlugin = 1$/;"	v
g:loaded_alignmaps	.\AlignMaps.vim	/^let g:loaded_alignmaps = "v39"$/;"	v
g:loaded_cecutil	.\cecutil.vim	/^let g:loaded_cecutil = "v17"$/;"	v
g:loaded_compview	.\compview.vim	/^let g:loaded_compview = 1$/;"	v
g:loaded_surround	.\surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_visincrPlugin	.\visincrPlugin.vim	/^let g:loaded_visincrPlugin = "v19"$/;"	v
g:snip_elem_delim	.\snippetsEmu.vim	/^    let g:snip_elem_delim = ":"$/;"	v
g:snip_end_tag	.\snippetsEmu.vim	/^    let g:snip_end_tag = "}>"$/;"	v
g:snip_start_tag	.\snippetsEmu.vim	/^    let g:snip_start_tag = "<{"$/;"	v
g:snippetsEmu_key	.\snippetsEmu.vim	/^  let g:snippetsEmu_key = "<Tab>"$/;"	v
g:visual_studio_find_results_1	.\visual_studio.vim	/^    let g:visual_studio_find_results_1 = $TEMP.'\\\\vs_find_results_1.txt'$/;"	v
g:visual_studio_find_results_2	.\visual_studio.vim	/^    let g:visual_studio_find_results_2 = $TEMP.'\\\\vs_find_results_2.txt'$/;"	v
g:visual_studio_has_python	.\visual_studio.vim	/^    let g:visual_studio_has_python = has('python')$/;"	v
g:visual_studio_output	.\visual_studio.vim	/^    let g:visual_studio_output = $TEMP.'\\\\vs_output.txt'$/;"	v
g:visual_studio_python_exe	.\visual_studio.vim	/^    let g:visual_studio_python_exe = 'python.exe'$/;"	v
g:visual_studio_quickfix_errorformat	.\visual_studio.vim	/^    let g:visual_studio_quickfix_errorformat = s:qf1.',\\\\'.s:qf2.',\\\\'.s:qf3$/;"	v
g:visual_studio_quickfix_errorformat_cpp	.\visual_studio.vim	/^    let g:visual_studio_quickfix_errorformat_cpp = '1>\\ %#%f(%l)\\ :\\ %m'$/;"	v
g:visual_studio_quickfix_errorformat_csharp	.\visual_studio.vim	/^    let g:visual_studio_quickfix_errorformat_csharp = '\\ %#%f(%l\\\\\\,%c):\\ %m'$/;"	v
g:visual_studio_quickfix_errorformat_find_results	.\visual_studio.vim	/^    let g:visual_studio_quickfix_errorformat_find_results = '\\ %#%f(%l):%m'$/;"	v
g:visual_studio_quickfix_errorformat_task_list	.\visual_studio.vim	/^    let g:visual_studio_quickfix_errorformat_task_list = '%f(%l)\\ %#:\\ %#%m'$/;"	v
g:visual_studio_quickfix_height	.\visual_studio.vim	/^    let g:visual_studio_quickfix_height = 20$/;"	v
g:visual_studio_task_list	.\visual_studio.vim	/^    let g:visual_studio_task_list = $TEMP.'\\\\vs_task_list.txt'$/;"	v
g:visual_studio_write_before_build	.\visual_studio.vim	/^    let g:visual_studio_write_before_build = 1$/;"	v
g:yankring_clipboard_monitor	.\yankring.vim	/^    let g:yankring_clipboard_monitor = 1$/;"	v
g:yankring_default_menu_mode	.\yankring.vim	/^    let g:yankring_default_menu_mode = 3$/;"	v
g:yankring_del_v_key	.\yankring.vim	/^    let g:yankring_del_v_key = 'd x'$/;"	v
g:yankring_dot_repeat_yank	.\yankring.vim	/^    let g:yankring_dot_repeat_yank = (&cpoptions=~'y'?1:0)$/;"	v
g:yankring_enabled	.\yankring.vim	/^    let g:yankring_enabled = 1$/;"	v
g:yankring_history_dir	.\yankring.vim	/^    let g:yankring_history_dir = expand('$HOME')$/;"	v
g:yankring_history_dir	.\yankring.vim	/^    let g:yankring_history_dir = expand(g:yankring_history_dir)$/;"	v
g:yankring_history_file	.\yankring.vim	/^    let g:yankring_history_file = 'yankring_history'$/;"	v
g:yankring_ignore_duplicate	.\yankring.vim	/^    let g:yankring_ignore_duplicate = 1$/;"	v
g:yankring_ignore_operator	.\yankring.vim	/^    let g:yankring_ignore_operator = 'g~ gu gU ! = gq g? > < zf g@'$/;"	v
g:yankring_ignore_operator	.\yankring.vim	/^let g:yankring_ignore_operator = ' '.g:yankring_ignore_operator.' '$/;"	v
g:yankring_manage_numbered_reg	.\yankring.vim	/^    let g:yankring_manage_numbered_reg = 0$/;"	v
g:yankring_map_dot	.\yankring.vim	/^    let g:yankring_map_dot = 1$/;"	v
g:yankring_max_display	.\yankring.vim	/^    let g:yankring_max_display = 0$/;"	v
g:yankring_max_element_length	.\yankring.vim	/^    let g:yankring_max_element_length = 1048576$/;"	v
g:yankring_max_history	.\yankring.vim	/^    let g:yankring_max_history = 100$/;"	v
g:yankring_n_keys	.\yankring.vim	/^        let g:yankring_n_keys = 'Y D x X'$/;"	v
g:yankring_n_keys	.\yankring.vim	/^        let g:yankring_n_keys = 'x yy dd yw dw ye de yE dE yiw diw yaw daw y$ d$ Y D yG dG ygg dgg'$/;"	v
g:yankring_o_keys	.\yankring.vim	/^    let g:yankring_o_keys  = 'b B w W e E d h j k l H M L y G ^ 0 $ , ;'$/;"	v
g:yankring_o_keys	.\yankring.vim	/^    let g:yankring_o_keys .= ' g_  g^ gm g$ gk gj gg ge gE - + _ '$/;"	v
g:yankring_o_keys	.\yankring.vim	/^    let g:yankring_o_keys .= ' iw iW aw aW as is ap ip a] a[ i] i[ a) a( ab i) i( ib a> a< i> i< at it a} a{ aB i} i{ iB a" a'' a` i" i'' i`'$/;"	v
g:yankring_paste_check_default_buffer	.\yankring.vim	/^    let g:yankring_paste_check_default_buffer = 1$/;"	v
g:yankring_paste_n_akey	.\yankring.vim	/^    let g:yankring_paste_n_akey = 'p'$/;"	v
g:yankring_paste_n_bkey	.\yankring.vim	/^    let g:yankring_paste_n_bkey = 'P'$/;"	v
g:yankring_paste_using_g	.\yankring.vim	/^    let g:yankring_paste_using_g = 1$/;"	v
g:yankring_paste_v_akey	.\yankring.vim	/^    let g:yankring_paste_v_akey = 'p'$/;"	v
g:yankring_paste_v_bkey	.\yankring.vim	/^    let g:yankring_paste_v_bkey = 'P'$/;"	v
g:yankring_persist	.\yankring.vim	/^    let g:yankring_persist = 1$/;"	v
g:yankring_replace_n_nkey	.\yankring.vim	/^    let g:yankring_replace_n_nkey = '<C-N>'$/;"	v
g:yankring_replace_n_pkey	.\yankring.vim	/^    let g:yankring_replace_n_pkey = '<C-P>'$/;"	v
g:yankring_share_between_instances	.\yankring.vim	/^    let g:yankring_share_between_instances = 1$/;"	v
g:yankring_v_key	.\yankring.vim	/^    let g:yankring_v_key = 'y'$/;"	v
g:yankring_window_auto_close	.\yankring.vim	/^    let g:yankring_window_auto_close = 1$/;"	v
g:yankring_window_height	.\yankring.vim	/^    let g:yankring_window_height = 8$/;"	v
g:yankring_window_increment	.\yankring.vim	/^    let g:yankring_window_increment = 50$/;"	v
g:yankring_window_use_bottom	.\yankring.vim	/^    let g:yankring_window_use_bottom = 1$/;"	v
g:yankring_window_use_horiz	.\yankring.vim	/^    let g:yankring_window_use_horiz = 1$/;"	v
g:yankring_window_use_right	.\yankring.vim	/^    let g:yankring_window_use_right = 1$/;"	v
g:yankring_window_use_separate	.\yankring.vim	/^    let g:yankring_window_use_separate = 1$/;"	v
g:yankring_window_width	.\yankring.vim	/^    let g:yankring_window_width = 30$/;"	v
g:yankring_zap_keys	.\yankring.vim	/^    let g:yankring_zap_keys = 'f F t T \/ ?'$/;"	v
getPath	.\NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSelectedBookmark	.\NERD_tree.vim	/^function! s:getSelectedBookmark()$/;"	f
getTreeWinNum	.\NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_project_unique_name	.\visual_studio.py	/^        def get_project_unique_name(name):$/;"	f	function:dte_build_project
getchar	.\surround.vim	/^function! s:getchar()$/;"	f
gitFunctions.Add	.\vcsgit.vim	/^function! s:gitFunctions.Add(argList)$/;"	f
gitFunctions.Annotate	.\vcsgit.vim	/^function! s:gitFunctions.Annotate(argList)$/;"	f
gitFunctions.Commit	.\vcsgit.vim	/^function! s:gitFunctions.Commit(argList)$/;"	f
gitFunctions.Delete	.\vcsgit.vim	/^function! s:gitFunctions.Delete(argList)$/;"	f
gitFunctions.Diff	.\vcsgit.vim	/^function! s:gitFunctions.Diff(argList)$/;"	f
gitFunctions.GetBufferInfo	.\vcsgit.vim	/^function! s:gitFunctions.GetBufferInfo()$/;"	f
gitFunctions.Identify	.\vcsgit.vim	/^function! s:gitFunctions.Identify(buffer)$/;"	f
gitFunctions.Log	.\vcsgit.vim	/^function! s:gitFunctions.Log(argList)$/;"	f
gitFunctions.Revert	.\vcsgit.vim	/^function! s:gitFunctions.Revert(argList)$/;"	f
gitFunctions.Review	.\vcsgit.vim	/^function! s:gitFunctions.Review(argList)$/;"	f
gitFunctions.Status	.\vcsgit.vim	/^function! s:gitFunctions.Status(argList)$/;"	f
gitFunctions.Update	.\vcsgit.vim	/^function! s:gitFunctions.Update(argList)$/;"	f
handleMiddleMouse	.\NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
indentLevelFor	.\NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	.\NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	.\NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	.\NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	.\NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
inputreplacement	.\surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	.\surround.vim	/^function! s:inputtarget()$/;"	f
insert	.\surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insertNewNode	.\NERD_tree.vim	/^function! s:insertNewNode()$/;"	f
isDigit	.\EnhancedCommentify.vim	/^function s:isDigit(char)$/;"	f
isTreeOpen	.\NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	.\NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
jumpToChild	.\NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	.\NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	.\NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	.\NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	.\NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	.\NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
loaded_VCSCommand	.\vcscommand.vim	/^let loaded_VCSCommand = 1$/;"	v
loaded_VCSCommand	.\vcscommand.vim	/^let loaded_VCSCommand = 2$/;"	v
loaded_alternateFile	.\a.vim	/^let loaded_alternateFile = 1$/;"	v
loaded_matchit	.\matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_nerd_tree	.\NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_plugin_visual_studio	.\visual_studio.vim	/^let loaded_plugin_visual_studio = 1$/;"	v
loaded_snippet	.\snippetsEmu.vim	/^let loaded_snippet=1$/;"	v
loaded_taglist	.\taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	.\taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	.\taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	.\taglist.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_yankring	.\yankring.vim	/^let loaded_yankring = 80$/;"	v
main	.\visual_studio.py	/^def main ():$/;"	f
mappingInfo	.\vcscvs.vim	/^let mappingInfo = [$/;"	v
menuRoot	.\yankring.vim	/^        let menuRoot = '&Plugin.&YankRing'$/;"	v
menuRoot	.\yankring.vim	/^        let menuRoot = '&YankRing'$/;"	v
menuRoot	.\yankring.vim	/^        let menuRoot = 'YankRing'$/;"	v
nextBufferName	.\NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
openBookmark	.\NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	.\NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	.\NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	.\NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	.\NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
opfunc	.\surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	.\surround.vim	/^function! s:opfunc2(arg)$/;"	f
previewNode	.\NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
process	.\surround.vim	/^function! s:process(string)$/;"	f
promptToDelBuffer	.\NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	.\NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	.\NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
redraw	.\surround.vim	/^function! s:redraw()$/;"	f
refreshCurrent	.\NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	.\NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
reindent	.\surround.vim	/^function! s:reindent() " {{{1$/;"	f
renameCurrent	.\NERD_tree.vim	/^function! s:renameCurrent()$/;"	f
renderBookmarks	.\NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	.\NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	.\NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repeat	.\surround.vim	/^function! s:repeat(str,count)$/;"	f
restoreScreenState	.\NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	.\NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
s	.\surround.vim	/^            vmap  s    <Plug>Vsurround$/;"	m
s:Action	.\EnhancedCommentify.vim	/^let s:Action = 'guess'$/;"	v
s:Attribute	.\c.vim	/^let s:Attribute                = { 'below':'', 'above':'', 'start':'', 'append':'', 'insert':'' }$/;"	v
s:Bookmark	.\NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:CFileSection	.\c.vim	/^let s:CFileSection	= { $/;"	v
s:CFileSectionOrdered	.\c.vim	/^let s:CFileSectionOrdered	= [ $/;"	v
s:C_Attribute	.\c.vim	/^let s:C_Attribute              = {}$/;"	v
s:C_C99Libs	.\c.vim	/^let s:C_C99Libs       = [$/;"	v
s:C_CComment	.\c.vim	/^let s:C_CComment         = '\\\/\\*.\\{-}\\*\\\/\\s*'		" C comment with trailing whitespaces$/;"	v
s:C_CCompiler	.\c.vim	/^	let s:C_CCompiler           = 'gcc'      " the C   compiler$/;"	v
s:C_CCompiler	.\c.vim	/^	let s:C_CCompiler           = 'gcc.exe'  " the C   compiler$/;"	v
s:C_CExtension	.\c.vim	/^let s:C_CExtension     				= 'c'                    " C file extension; everything else is C++$/;"	v
s:C_CFlags	.\c.vim	/^let s:C_CFlags         				= '-Wall -g -O0 -c'      " compiler flags: compile, don't optimize$/;"	v
s:C_CodeCheckExeName	.\c.vim	/^let s:C_CodeCheckExeName      = 'check'$/;"	v
s:C_CodeCheckIsExecutable	.\c.vim	/^	let s:C_CodeCheckIsExecutable	= 1$/;"	v
s:C_CodeCheckIsExecutable	.\c.vim	/^let s:C_CodeCheckIsExecutable	= 0$/;"	v
s:C_CodeCheckOptions	.\c.vim	/^let s:C_CodeCheckOptions      = '-K13'$/;"	v
s:C_CodeSnippets	.\c.vim	/^	let s:C_CodeSnippets   = $HOME.'\/.vim\/c-support\/codesnippets\/'$/;"	v
s:C_CodeSnippets	.\c.vim	/^  let s:C_CodeSnippets   = s:plugin_dir.'c-support\/codesnippets\/'$/;"	v
s:C_CplusCompiler	.\c.vim	/^	let s:C_CplusCompiler       = 'g++'      " the C++ compiler$/;"	v
s:C_CplusCompiler	.\c.vim	/^	let s:C_CplusCompiler       = 'g++.exe'  " the C++ compiler$/;"	v
s:C_CppComment	.\c.vim	/^let s:C_CppComment       = '\\\/\\\/.*$'						" C++ comment$/;"	v
s:C_Ctrl_j	.\c.vim	/^let s:C_Ctrl_j								 = 'on'$/;"	v
s:C_Display	.\c.vim	/^	let s:C_Display	= system("echo -n $DISPLAY")$/;"	v
s:C_Display	.\c.vim	/^	let s:C_Display        = ''$/;"	v
s:C_DocBufferName	.\c.vim	/^let s:C_DocBufferName       = "C_HELP"$/;"	v
s:C_DocHelpBufferNumber	.\c.vim	/^let s:C_DocHelpBufferNumber = -1$/;"	v
s:C_ExeExtension	.\c.vim	/^	let s:C_ExeExtension        = ''         " file extension for executables (leading point required)$/;"	v
s:C_ExeExtension	.\c.vim	/^	let s:C_ExeExtension        = '.exe'     " file extension for executables (leading point required)$/;"	v
s:C_ExpansionCounter	.\c.vim	/^let s:C_ExpansionCounter       = {}$/;"	v
s:C_ExpansionLimit	.\c.vim	/^let s:C_ExpansionLimit         = 10$/;"	v
s:C_ExpansionRegex	.\c.vim	/^let s:C_ExpansionRegex				 = '|?'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_FileVisited	.\c.vim	/^let s:C_FileVisited            = []$/;"	v
s:C_ForTypes	.\c.vim	/^let s:C_ForTypes     = [$/;"	v
s:C_FormatDate	.\c.vim	/^let s:C_FormatDate						= '%x'$/;"	v
s:C_FormatTime	.\c.vim	/^let s:C_FormatTime						= '%X'$/;"	v
s:C_FormatYear	.\c.vim	/^let s:C_FormatYear						= '%Y'$/;"	v
s:C_GlobalTemplateDir	.\c.vim	/^let s:C_GlobalTemplateDir     = fnamemodify( s:C_GlobalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_GlobalTemplateFile	.\c.vim	/^let s:C_GlobalTemplateFile    = s:plugin_dir.'c-support\/templates\/Templates'$/;"	v
s:C_HlMessage	.\c.vim	/^let s:C_HlMessage    = ""$/;"	v
s:C_If0_Counter	.\c.vim	/^let s:C_If0_Counter   = 0$/;"	v
s:C_If0_Txt	.\c.vim	/^let s:C_If0_Txt		 		= "If0Label_"$/;"	v
s:C_IndentErrorLog	.\c.vim	/^	let s:C_IndentErrorLog = $HOME.'\/.indent.errorlog'$/;"	v
s:C_IndentErrorLog	.\c.vim	/^  let s:C_IndentErrorLog = $HOME.'.indent.errorlog'$/;"	v
s:C_LFlags	.\c.vim	/^let s:C_LFlags         				= '-Wall -g -O0'         " compiler flags: link   , don't optimize$/;"	v
s:C_Libs	.\c.vim	/^let s:C_Libs           				= '-lm'                  " libraries to use$/;"	v
s:C_LineEndCommColDefault	.\c.vim	/^let s:C_LineEndCommColDefault = 49$/;"	v
s:C_LoadMenus	.\c.vim	/^let s:C_LoadMenus      				= 'yes'$/;"	v
s:C_LocalTemplateDir	.\c.vim	/^let s:C_LocalTemplateDir      = fnamemodify( s:C_LocalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_LocalTemplateFile	.\c.vim	/^let s:C_LocalTemplateFile     = $HOME.'\/.vim\/c-support\/templates\/Templates'$/;"	v
s:C_Macro	.\c.vim	/^let s:C_Macro                  = {'|AUTHOR|'         : 'first name surname',$/;"	v
s:C_MacroCommentRegex	.\c.vim	/^let s:C_MacroCommentRegex			 = '^\\$'$/;"	v
s:C_MacroFlag	.\c.vim	/^let	s:C_MacroFlag								= {	':l' : 'lowercase'			,$/;"	v
s:C_MacroLineRegex	.\c.vim	/^let s:C_MacroLineRegex				 = '^\\s*|'.s:C_MacroNameRegex.'|\\s*=\\s*\\(.*\\)'$/;"	v
s:C_MacroNameRegex	.\c.vim	/^let s:C_MacroNameRegex         = '\\([a-zA-Z][a-zA-Z0-9_]*\\)'$/;"	v
s:C_MakeCmdLineArgs	.\c.vim	/^let s:C_MakeCmdLineArgs   = ""     " command line arguments for Run-make; initially empty$/;"	v
s:C_Man	.\c.vim	/^	let s:C_Man                 = 'man'      " the manual program$/;"	v
s:C_Man	.\c.vim	/^	let s:C_Man                 = 'man.exe'  " the manual program$/;"	v
s:C_MenuHeader	.\c.vim	/^let s:C_MenuHeader     				= 'yes'$/;"	v
s:C_MenuVisible	.\c.vim	/^let s:C_MenuVisible = 0								" state variable controlling the C-menus$/;"	v
s:C_NonExpansionRegex	.\c.vim	/^let s:C_NonExpansionRegex			 = '|'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_ObjExtension	.\c.vim	/^	let s:C_ObjExtension        = '.o'       " file extension for objects (leading point required)$/;"	v
s:C_ObjExtension	.\c.vim	/^	let s:C_ObjExtension        = '.obj'     " file extension for objects (leading point required)$/;"	v
s:C_OutputBufferName	.\c.vim	/^let s:C_OutputBufferName   = "C-Output"$/;"	v
s:C_OutputBufferNumber	.\c.vim	/^let s:C_OutputBufferNumber = -1$/;"	v
s:C_OutputGvim	.\c.vim	/^let s:C_OutputGvim            = 'vim'$/;"	v
s:C_Printheader	.\c.vim	/^let s:C_Printheader           = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"$/;"	v
s:C_Printheader	.\c.vim	/^let s:C_Printheader  = escape( s:C_Printheader, ' %' )$/;"	v
s:C_Prototype	.\c.vim	/^let s:C_Prototype        = []$/;"	v
s:C_PrototypeCounter	.\c.vim	/^let s:C_PrototypeCounter = 0$/;"	v
s:C_PrototypeShow	.\c.vim	/^let s:C_PrototypeShow    = []$/;"	v
s:C_Root	.\c.vim	/^let s:C_Root  	       				= '&C\\\/C\\+\\+.'           " the name of the root menu of this plugin$/;"	v
s:C_SourceCodeExtensions	.\c.vim	/^let s:C_SourceCodeExtensions  = 'c cc cp cxx cpp CPP c++ C i ii'$/;"	v
s:C_SourceCodeExtensionsList	.\c.vim	/^let s:C_SourceCodeExtensionsList	= split( s:C_SourceCodeExtensions, '\\s\\+' )$/;"	v
s:C_SplintIsExecutable	.\c.vim	/^	let s:C_SplintIsExecutable	= 1$/;"	v
s:C_SplintIsExecutable	.\c.vim	/^let s:C_SplintIsExecutable	= 0$/;"	v
s:C_StandardLibs	.\c.vim	/^let s:C_StandardLibs       = [$/;"	v
s:C_StartMultilineComment	.\c.vim	/^let s:C_StartMultilineComment	= '^\\s*\\\/\\*[\\*! ]\\='$/;"	v
s:C_TJT	.\c.vim	/^let s:C_TJT										 = '[ 0-9a-zA-Z_]*'$/;"	v
s:C_Template	.\c.vim	/^let s:C_Template               = {}$/;"	v
s:C_TemplateEndif	.\c.vim	/^let s:C_TemplateEndif					 = '^==\\s*ENDIF\\s*=='$/;"	v
s:C_TemplateIf	.\c.vim	/^let s:C_TemplateIf						 = '^==\\s*IF\\s\\+|STYLE|\\s\\+IS\\s\\+'.s:C_MacroNameRegex.'\\s*=='$/;"	v
s:C_TemplateJumpTarget1	.\c.vim	/^let s:C_TemplateJumpTarget1    = '<+'.s:C_TJT.'+>\\|{+'.s:C_TJT.'+}'$/;"	v
s:C_TemplateJumpTarget2	.\c.vim	/^let s:C_TemplateJumpTarget2    = '<-'.s:C_TJT.'->\\|{-'.s:C_TJT.'-}'$/;"	v
s:C_TemplateLineRegex	.\c.vim	/^let s:C_TemplateLineRegex			 = '^==\\s*\\([a-zA-Z][0-9a-zA-Z'.s:C_TemplateNameDelimiter$/;"	v
s:C_TemplateLineRegex	.\c.vim	/^let s:C_TemplateLineRegex			.= ']\\+\\)\\s*==\\s*\\([a-z]\\+\\s*==\\)\\?'$/;"	v
s:C_TemplateNameDelimiter	.\c.vim	/^let s:C_TemplateNameDelimiter  = '-+_,\\. '$/;"	v
s:C_TemplateOverwrittenMsg	.\c.vim	/^let s:C_TemplateOverwrittenMsg= 'yes'$/;"	v
s:C_TypeOfH	.\c.vim	/^let s:C_TypeOfH               = 'cpp'$/;"	v
s:C_Wrapper	.\c.vim	/^let s:C_Wrapper               = s:plugin_dir.'c-support\/scripts\/wrapper.sh'$/;"	v
s:C_XtermDefaults	.\c.vim	/^	let s:C_XtermDefaults	= s:C_XtermDefaults." -geometry 80x24"$/;"	v
s:C_XtermDefaults	.\c.vim	/^let s:C_XtermDefaults         = '-fa courier -fs 12 -geometry 80x24'$/;"	v
s:Comments	.\c.vim	/^let s:Comments     = s:C_Root.'&Comments'$/;"	v
s:Cpp	.\c.vim	/^let s:Cpp          = s:C_Root.'C&++'$/;"	v
s:Cpp_IosFlagBits	.\c.vim	/^let s:Cpp_IosFlagBits       = [$/;"	v
s:Cpp_StandardLibs1	.\c.vim	/^let s:Cpp_StandardLibs1       = [$/;"	v
s:Cpp_StandardLibs2	.\c.vim	/^let s:Cpp_StandardLibs2       = [$/;"	v
s:Cpp_StandardLibs3	.\c.vim	/^let s:Cpp_StandardLibs3       = [$/;"	v
s:Disable	.\snippetsEmu.vim	/^let s:Disable = 0$/;"	v
s:ECalignRight	.\EnhancedCommentify.vim	/^let s:ECalignRight = 0$/;"	v
s:ECaltClose	.\EnhancedCommentify.vim	/^let s:ECaltClose = "+|"$/;"	v
s:ECaltOpen	.\EnhancedCommentify.vim	/^let s:ECaltOpen = "|+"$/;"	v
s:ECbindInInsert	.\EnhancedCommentify.vim	/^let s:ECbindInInsert = 1$/;"	v
s:ECbindInNormal	.\EnhancedCommentify.vim	/^let s:ECbindInNormal = 1$/;"	v
s:ECbindInVisual	.\EnhancedCommentify.vim	/^let s:ECbindInVisual = 1$/;"	v
s:ECbindPerBuffer	.\EnhancedCommentify.vim	/^let s:ECbindPerBuffer = 0$/;"	v
s:ECbindUnknown	.\EnhancedCommentify.vim	/^let s:ECbindUnknown = 1$/;"	v
s:ECfirstLineMode	.\EnhancedCommentify.vim	/^let s:ECfirstLineMode = 0$/;"	v
s:ECidentFront	.\EnhancedCommentify.vim	/^let s:ECidentFront = ''$/;"	v
s:ECignoreWS	.\EnhancedCommentify.vim	/^let s:ECignoreWS = 1$/;"	v
s:ECprettyComments	.\EnhancedCommentify.vim	/^let s:ECprettyComments = ''$/;"	v
s:ECprettyUnComments	.\EnhancedCommentify.vim	/^let s:ECprettyUnComments = ''$/;"	v
s:ECrespectIndent	.\EnhancedCommentify.vim	/^let s:ECrespectIndent = 0$/;"	v
s:ECtraditionalMode	.\EnhancedCommentify.vim	/^let s:ECtraditionalMode = 0$/;"	v
s:ECuseAltKeys	.\EnhancedCommentify.vim	/^let s:ECuseAltKeys = 0$/;"	v
s:ECuseBlockIndent	.\EnhancedCommentify.vim	/^let s:ECuseBlockIndent = 0$/;"	v
s:ECuseCommentsOp	.\EnhancedCommentify.vim	/^let s:ECuseCommentsOp = 0$/;"	v
s:ECuseMPBlock	.\EnhancedCommentify.vim	/^let s:ECuseMPBlock = 0$/;"	v
s:ECuseSyntax	.\EnhancedCommentify.vim	/^let s:ECuseSyntax = 0$/;"	v
s:ECuserBindings	.\EnhancedCommentify.vim	/^let s:ECuserBindings = 0$/;"	v
s:ECuserMode	.\EnhancedCommentify.vim	/^let s:ECuserMode = 1$/;"	v
s:HFileSection	.\c.vim	/^let s:HFileSection	= { $/;"	v
s:HFileSectionOrdered	.\c.vim	/^let s:HFileSectionOrdered	= [ $/;"	v
s:I	.\visincrPlugin.vim	/^let s:I      = 0$/;"	v
s:IA	.\visincrPlugin.vim	/^let s:IA     = 7$/;"	v
s:ID	.\visincrPlugin.vim	/^let s:ID     = 5$/;"	v
s:IDMY	.\visincrPlugin.vim	/^let s:IDMY   = 4$/;"	v
s:II	.\visincrPlugin.vim	/^let s:II     = 1$/;"	v
s:IIO	.\visincrPlugin.vim	/^let s:IIO    = 11$/;"	v
s:IIPOW	.\visincrPlugin.vim	/^let s:IIPOW  = 15$/;"	v
s:IIR	.\visincrPlugin.vim	/^let s:IIR    = 13$/;"	v
s:IIX	.\visincrPlugin.vim	/^let s:IIX    = 9$/;"	v
s:IM	.\visincrPlugin.vim	/^let s:IM     = 6$/;"	v
s:IMDY	.\visincrPlugin.vim	/^let s:IMDY   = 2$/;"	v
s:IO	.\visincrPlugin.vim	/^let s:IO     = 10$/;"	v
s:IPOW	.\visincrPlugin.vim	/^let s:IPOW   = 14$/;"	v
s:IR	.\visincrPlugin.vim	/^let s:IR     = 12$/;"	v
s:IX	.\visincrPlugin.vim	/^let s:IX     = 8$/;"	v
s:IYMD	.\visincrPlugin.vim	/^let s:IYMD   = 3$/;"	v
s:Idioms	.\c.vim	/^let s:Idioms       = s:C_Root.'&Idioms'$/;"	v
s:KeywordComment	.\c.vim	/^let s:KeywordComment	= { $/;"	v
s:MRUList	.\bufexplorer.vim	/^let s:MRUList = []$/;"	v
s:MSWIN	.\c.vim	/^let	s:MSWIN =		has("win16") || has("win32") || has("win64") || has("win95")$/;"	v
s:MsgInsNotAvail	.\c.vim	/^let s:MsgInsNotAvail	= "insertion not available for a fold" $/;"	v
s:NERDTreeBufName	.\NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	.\NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	.\NERD_tree.vim	/^let s:NERD_tree_version = '3.1.1'$/;"	v
s:Path	.\NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Preprocessor	.\c.vim	/^let s:Preprocessor = s:C_Root.'&Preprocessor'$/;"	v
s:RI	.\visincrPlugin.vim	/^let s:RI     = 16$/;"	v
s:RIA	.\visincrPlugin.vim	/^let s:RIA    = 23$/;"	v
s:RID	.\visincrPlugin.vim	/^let s:RID    = 21$/;"	v
s:RIDMY	.\visincrPlugin.vim	/^let s:RIDMY  = 20$/;"	v
s:RII	.\visincrPlugin.vim	/^let s:RII    = 17$/;"	v
s:RIIO	.\visincrPlugin.vim	/^let s:RIIO   = 27$/;"	v
s:RIIPOW	.\visincrPlugin.vim	/^let s:RIIPOW = 31$/;"	v
s:RIIR	.\visincrPlugin.vim	/^let s:RIIR   = 29$/;"	v
s:RIIX	.\visincrPlugin.vim	/^let s:RIIX   = 25$/;"	v
s:RIM	.\visincrPlugin.vim	/^let s:RIM    = 22$/;"	v
s:RIMDY	.\visincrPlugin.vim	/^let s:RIMDY  = 18$/;"	v
s:RIO	.\visincrPlugin.vim	/^let s:RIO    = 26$/;"	v
s:RIPOW	.\visincrPlugin.vim	/^let s:RIPOW  = 30$/;"	v
s:RIR	.\visincrPlugin.vim	/^let s:RIR    = 28$/;"	v
s:RIX	.\visincrPlugin.vim	/^let s:RIX    = 24$/;"	v
s:RIYMD	.\visincrPlugin.vim	/^let s:RIYMD  = 19$/;"	v
s:Run	.\c.vim	/^let s:Run          = s:C_Root.'&Run'$/;"	v
s:Snippets	.\c.vim	/^let s:Snippets     = s:C_Root.'S&nippets'$/;"	v
s:SpecialComment	.\c.vim	/^let s:SpecialComment	= { $/;"	v
s:Statements	.\c.vim	/^let s:Statements   = s:C_Root.'&Statements'$/;"	v
s:Tlist_Skip_Refresh	.\taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	.\NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	.\NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:accept_key	.\word_complete.vim	/^let s:accept_key = exists("g:WC_accept_key") ? g:WC_accept_key : "<Tab>"$/;"	v
s:blockAction	.\EnhancedCommentify.vim	/^let s:blockAction = 'comment'$/;"	v
s:blockIndent	.\EnhancedCommentify.vim	/^let s:blockIndent = 0$/;"	v
s:blockIndentRegex	.\EnhancedCommentify.vim	/^let s:blockIndentRegex = ''$/;"	v
s:cpo_save	.\surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.\taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cvsExtensionMappings	.\vcscvs.vim	/^		let s:cvsExtensionMappings[shortCut] = commandText$/;"	v
s:cvsExtensionMappings	.\vcscvs.vim	/^let s:cvsExtensionMappings = {}$/;"	v
s:cvsFunctions	.\vcscvs.vim	/^let s:cvsFunctions = {}$/;"	v
s:debug	.\snippetsEmu.vim	/^let s:debug = 0$/;"	v
s:defaultMappings	.\vcscommand.vim	/^let s:defaultMappings = [$/;"	v
s:emptyLines	.\EnhancedCommentify.vim	/^let s:emptyLines = 'no'$/;"	v
s:escape_chars	.\NERD_tree.vim	/^let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escfilename	.\c.vim	/^  let s:escfilename 	= ' \\%#[]'$/;"	v
s:escfilename	.\c.vim	/^  let s:escfilename      = ''$/;"	v
s:firstOfBlock	.\EnhancedCommentify.vim	/^let s:firstOfBlock = 1$/;"	v
s:firstmenu	.\AlignMaps.vim	/^ let s:firstmenu= 1$/;"	v
s:gitFunctions	.\vcsgit.vim	/^let s:gitFunctions = {}$/;"	v
s:inBlock	.\EnhancedCommentify.vim	/^let s:inBlock = 0$/;"	v
s:installation	.\c.vim	/^		let s:installation	= 'system'$/;"	v
s:installation	.\c.vim	/^	let s:installation	   = 'system'$/;"	v
s:installation	.\c.vim	/^	let s:installation	= 'local'$/;"	v
s:isEditFileRunning	.\vcscommand.vim	/^let s:isEditFileRunning = 0$/;"	v
s:keepcpo	.\AlignMaps.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	.\AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	.\cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	.\visincrPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:last_mps	.\matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	.\matchit.vim	/^let s:last_words = ":"$/;"	v
s:maxDotsInExtension	.\a.vim	/^let s:maxDotsInExtension = 1$/;"	v
s:maxLen	.\EnhancedCommentify.vim	/^let s:maxLen = 0$/;"	v
s:menu_char_prefix	.\taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:min_len	.\word_complete.vim	/^let s:min_len = exists("g:WC_min_len") ? g:WC_min_len : 1$/;"	v
s:modifier	.\cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	.\cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:next_buffer_number	.\NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:notslash	.\matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:old_cpo	.\NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:optionOverrides	.\vcscommand.vim	/^let s:optionOverrides = {}$/;"	v
s:originBuffer	.\bufexplorer.vim	/^let s:originBuffer = 0$/;"	v
s:os_slash	.\NERD_tree.vim	/^    let s:os_slash = '\\'$/;"	v
s:os_slash	.\NERD_tree.vim	/^let s:os_slash = '\/'$/;"	v
s:overrideEmptyLines	.\EnhancedCommentify.vim	/^let s:overrideEmptyLines = 0$/;"	v
s:plugin_dir	.\c.vim	/^		let s:plugin_dir  = $HOME.'\/.vim\/'$/;"	v
s:plugin_dir	.\c.vim	/^		let s:plugin_dir  = $VIM.'\/vimfiles\/'$/;"	v
s:plugin_dir	.\c.vim	/^  let s:plugin_dir       = $VIM.'\\vimfiles\\'$/;"	v
s:plugins	.\vcscommand.vim	/^let s:plugins = {}$/;"	v
s:qf1	.\visual_studio.vim	/^    let s:qf1 = g:visual_studio_quickfix_errorformat_cpp$/;"	v
s:qf2	.\visual_studio.vim	/^    let s:qf2 = g:visual_studio_quickfix_errorformat_csharp$/;"	v
s:qf3	.\visual_studio.vim	/^    let s:qf3 = g:visual_studio_quickfix_errorformat_find_results$/;"	v
s:running	.\bufexplorer.vim	/^let s:running = 0$/;"	v
s:running_windows	.\NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	.\matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.\vcscommand.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	.\vcscvs.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	.\vcsgit.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	.\vcssvk.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	.\vcssvn.vim	/^let s:save_cpo=&cpo$/;"	v
s:savedCpo	.\EnhancedCommentify.vim	/^let s:savedCpo = &cpo$/;"	v
s:sort_by	.\bufexplorer.vim	/^let s:sort_by = ["number", "name", "fullpath", "mru", "extension"]$/;"	v
s:spc	.\sketch.vim	/^let s:spc = '                                 '$/;"	v
s:splitMode	.\bufexplorer.vim	/^let s:splitMode = ""$/;"	v
s:svkFunctions	.\vcssvk.vim	/^let s:svkFunctions = {}$/;"	v
s:svnFunctions	.\vcssvn.vim	/^let s:svnFunctions = {}$/;"	v
s:tabConvert	.\EnhancedCommentify.vim	/^let s:tabConvert = ''$/;"	v
s:tabSpace	.\bufexplorer.vim	/^let s:tabSpace = []$/;"	v
s:tlist_app_name	.\taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	.\taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	.\taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	.\taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	.\taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	.\taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	.\taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	.\taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	.\taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	.\taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	.\taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	.\taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	.\taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	.\taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	.\taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	.\taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	.\taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	.\taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	.\taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	.\taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	.\taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	.\taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	.\taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	.\taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	.\taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	.\taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	.\taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	.\taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	.\taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	.\taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	.\taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	.\taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	.\taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	.\taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	.\taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	.\taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	.\taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	.\taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	.\taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	.\taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	.\taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	.\taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	.\taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	.\taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	.\taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	.\taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	.\taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	.\taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	.\taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	.\taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	.\taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	.\taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	.\taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	.\NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	.\NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	.\NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	.\bufexplorer.vim	/^let s:types = {"fullname": ':p', "path": ':p:h', "relativename": ':~:.', "relativepath": ':~:.:h', "shortname": ':t'}$/;"	v
s:visual_studio_location	.\visual_studio.vim	/^let s:visual_studio_location = expand("<sfile>:h")$/;"	v
s:visual_studio_lst_dte	.\visual_studio.vim	/^let s:visual_studio_lst_dte = []$/;"	v
s:visual_studio_lst_project	.\visual_studio.vim	/^let s:visual_studio_lst_project = []$/;"	v
s:visual_studio_module	.\visual_studio.vim	/^let s:visual_studio_module = 'visual_studio'$/;"	v
s:visual_studio_pid	.\visual_studio.vim	/^let s:visual_studio_pid = 0$/;"	v
s:visual_studio_python_init	.\visual_studio.vim	/^let s:visual_studio_python_init = 0$/;"	v
s:visual_studio_startup_project_index	.\visual_studio.vim	/^let s:visual_studio_startup_project_index = -1$/;"	v
s:yankring_winsize_chgd	.\yankring.vim	/^let s:yankring_winsize_chgd = 0$/;"	v
s:yr_buffer_id	.\yankring.vim	/^let s:yr_buffer_id         = -1$/;"	v
s:yr_buffer_last	.\yankring.vim	/^let s:yr_buffer_last       = -1$/;"	v
s:yr_buffer_last_winnr	.\yankring.vim	/^let s:yr_buffer_last_winnr = -1$/;"	v
s:yr_buffer_name	.\yankring.vim	/^let s:yr_buffer_name       = '__YankRing__'$/;"	v
s:yr_has_voperator	.\yankring.vim	/^    let s:yr_has_voperator = 1$/;"	v
s:yr_has_voperator	.\yankring.vim	/^let s:yr_has_voperator     = 0$/;"	v
s:yr_history_file_v1	.\yankring.vim	/^let s:yr_history_file_v1   = $/;"	v
s:yr_history_file_v2	.\yankring.vim	/^let s:yr_history_file_v2   = $/;"	v
s:yr_history_last_upd	.\yankring.vim	/^let s:yr_history_last_upd  = 0$/;"	v
s:yr_history_v1_nl	.\yankring.vim	/^let s:yr_history_v1_nl     = '@@@'$/;"	v
s:yr_history_v1_nl_pat	.\yankring.vim	/^let s:yr_history_v1_nl_pat = '\\%(\\\\\\)\\@<!@@@'$/;"	v
s:yr_history_v2_nl	.\yankring.vim	/^let s:yr_history_v2_nl     = "\\2" " Use double quotes for a special character$/;"	v
s:yr_history_v2_nl_pat	.\yankring.vim	/^let s:yr_history_v2_nl_pat = "\\2"$/;"	v
s:yr_history_version	.\yankring.vim	/^let s:yr_history_version   = 'v2'$/;"	v
s:yr_remove_omap_dot	.\yankring.vim	/^let s:yr_remove_omap_dot   = 0$/;"	v
s:yr_search	.\yankring.vim	/^let s:yr_search            = ''$/;"	v
saveScreenState	.\NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_cpo	.\word_complete.vim	/^let save_cpo = &cpo$/;"	v
setupStatusline	.\NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	.\NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
showFileSystemMenu	.\NERD_tree.vim	/^function! s:showFileSystemMenu()$/;"	f
snip	.\snippetsEmu.vim	/^  let snip = substitute(def_file, '.*[\\\\\/]\\(.*\\)_snippets.vim', '\\1', '')$/;"	v
stripMarkupFromLine	.\NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
svkFunctions.Add	.\vcssvk.vim	/^function! s:svkFunctions.Add(argList)$/;"	f
svkFunctions.Annotate	.\vcssvk.vim	/^function! s:svkFunctions.Annotate(argList)$/;"	f
svkFunctions.Commit	.\vcssvk.vim	/^function! s:svkFunctions.Commit(argList)$/;"	f
svkFunctions.Delete	.\vcssvk.vim	/^function! s:svkFunctions.Delete(argList)$/;"	f
svkFunctions.Diff	.\vcssvk.vim	/^function! s:svkFunctions.Diff(argList)$/;"	f
svkFunctions.GetBufferInfo	.\vcssvk.vim	/^function! s:svkFunctions.GetBufferInfo()$/;"	f
svkFunctions.Identify	.\vcssvk.vim	/^function! s:svkFunctions.Identify(buffer)$/;"	f
svkFunctions.Info	.\vcssvk.vim	/^function! s:svkFunctions.Info(argList)$/;"	f
svkFunctions.Lock	.\vcssvk.vim	/^function! s:svkFunctions.Lock(argList)$/;"	f
svkFunctions.Log	.\vcssvk.vim	/^function! s:svkFunctions.Log(argList)$/;"	f
svkFunctions.Revert	.\vcssvk.vim	/^function! s:svkFunctions.Revert(argList)$/;"	f
svkFunctions.Review	.\vcssvk.vim	/^function! s:svkFunctions.Review(argList)$/;"	f
svkFunctions.Status	.\vcssvk.vim	/^function! s:svkFunctions.Status(argList)$/;"	f
svkFunctions.Unlock	.\vcssvk.vim	/^function! s:svkFunctions.Unlock(argList)$/;"	f
svkFunctions.Update	.\vcssvk.vim	/^function! s:svkFunctions.Update(argList)$/;"	f
svnFunctions.Add	.\vcssvn.vim	/^function! s:svnFunctions.Add(argList)$/;"	f
svnFunctions.Annotate	.\vcssvn.vim	/^function! s:svnFunctions.Annotate(argList)$/;"	f
svnFunctions.Commit	.\vcssvn.vim	/^function! s:svnFunctions.Commit(argList)$/;"	f
svnFunctions.Delete	.\vcssvn.vim	/^function! s:svnFunctions.Delete(argList)$/;"	f
svnFunctions.Diff	.\vcssvn.vim	/^function! s:svnFunctions.Diff(argList)$/;"	f
svnFunctions.GetBufferInfo	.\vcssvn.vim	/^function! s:svnFunctions.GetBufferInfo()$/;"	f
svnFunctions.Identify	.\vcssvn.vim	/^function! s:svnFunctions.Identify(buffer)$/;"	f
svnFunctions.Info	.\vcssvn.vim	/^function! s:svnFunctions.Info(argList)$/;"	f
svnFunctions.Lock	.\vcssvn.vim	/^function! s:svnFunctions.Lock(argList)$/;"	f
svnFunctions.Log	.\vcssvn.vim	/^function! s:svnFunctions.Log(argList)$/;"	f
svnFunctions.Revert	.\vcssvn.vim	/^function! s:svnFunctions.Revert(argList)$/;"	f
svnFunctions.Review	.\vcssvn.vim	/^function! s:svnFunctions.Review(argList)$/;"	f
svnFunctions.Status	.\vcssvn.vim	/^function! s:svnFunctions.Status(argList)$/;"	f
svnFunctions.Unlock	.\vcssvn.vim	/^function! s:svnFunctions.Unlock(argList)$/;"	f
svnFunctions.Update	.\vcssvn.vim	/^function! s:svnFunctions.Update(argList)$/;"	f
tabpagevar	.\NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
toggle	.\NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	.\NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	.\NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	.\NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	.\NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
treeExistsForBuf	.\NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	.\NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
unique	.\NERD_tree.vim	/^function! s:unique(list)$/;"	f
upDir	.\NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
wrap	.\surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	.\surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
yS	.\surround.vim	/^    nmap          yS   <Plug>YSurround$/;"	m
ySS	.\surround.vim	/^    nmap          ySS  <Plug>YSsurround$/;"	m
ySs	.\surround.vim	/^    nmap          ySs  <Plug>YSsurround$/;"	m
ys	.\surround.vim	/^    nmap          ys   <Plug>Ysurround$/;"	m
yss	.\surround.vim	/^    nmap          yss  <Plug>Yssurround$/;"	m
